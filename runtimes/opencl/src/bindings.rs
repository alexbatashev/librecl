/* automatically generated by rust-bindgen 0.60.1 */

pub const CL_VERSION_3_0: u32 = 1;
pub const CL_VERSION_2_2: u32 = 1;
pub const CL_VERSION_2_1: u32 = 1;
pub const CL_VERSION_2_0: u32 = 1;
pub const CL_VERSION_1_2: u32 = 1;
pub const CL_VERSION_1_1: u32 = 1;
pub const CL_VERSION_1_0: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CL_CHAR_BIT: u32 = 8;
pub const CL_SCHAR_MAX: u32 = 127;
pub const CL_SCHAR_MIN: i32 = -128;
pub const CL_CHAR_MAX: u32 = 127;
pub const CL_CHAR_MIN: i32 = -128;
pub const CL_UCHAR_MAX: u32 = 255;
pub const CL_SHRT_MAX: u32 = 32767;
pub const CL_SHRT_MIN: i32 = -32768;
pub const CL_USHRT_MAX: u32 = 65535;
pub const CL_INT_MAX: u32 = 2147483647;
pub const CL_INT_MIN: i32 = -2147483648;
pub const CL_UINT_MAX: u32 = 4294967295;
pub const CL_FLT_DIG: u32 = 6;
pub const CL_FLT_MANT_DIG: u32 = 24;
pub const CL_FLT_MAX_10_EXP: u32 = 38;
pub const CL_FLT_MAX_EXP: u32 = 128;
pub const CL_FLT_MIN_10_EXP: i32 = -37;
pub const CL_FLT_MIN_EXP: i32 = -125;
pub const CL_FLT_RADIX: u32 = 2;
pub const CL_FLT_MAX: f64 = 340282346638528860000000000000000000000.0;
pub const CL_HALF_DIG: u32 = 3;
pub const CL_HALF_MANT_DIG: u32 = 11;
pub const CL_HALF_MAX_10_EXP: u32 = 4;
pub const CL_HALF_MAX_EXP: u32 = 16;
pub const CL_HALF_MIN_10_EXP: i32 = -4;
pub const CL_HALF_MIN_EXP: i32 = -13;
pub const CL_HALF_RADIX: u32 = 2;
pub const CL_HALF_MAX: f64 = 65504.0;
pub const CL_DBL_DIG: u32 = 15;
pub const CL_DBL_MANT_DIG: u32 = 53;
pub const CL_DBL_MAX_10_EXP: u32 = 308;
pub const CL_DBL_MAX_EXP: u32 = 1024;
pub const CL_DBL_MIN_10_EXP: i32 = -307;
pub const CL_DBL_MIN_EXP: i32 = -1021;
pub const CL_DBL_RADIX: u32 = 2;
pub const CL_DBL_MAX : f64 = 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const CL_M_E: f64 = 2.718281828459045;
pub const CL_M_LOG2E: f64 = 1.4426950408889634;
pub const CL_M_LOG10E: f64 = 0.4342944819032518;
pub const CL_M_LN2: f64 = 0.6931471805599453;
pub const CL_M_LN10: f64 = 2.302585092994046;
pub const CL_M_PI: f64 = 3.141592653589793;
pub const CL_M_PI_2: f64 = 1.5707963267948966;
pub const CL_M_PI_4: f64 = 0.7853981633974483;
pub const CL_M_1_PI: f64 = 0.3183098861837907;
pub const CL_M_2_PI: f64 = 0.6366197723675814;
pub const CL_M_2_SQRTPI: f64 = 1.1283791670955126;
pub const CL_M_SQRT2: f64 = 1.4142135623730951;
pub const CL_M_SQRT1_2: f64 = 0.7071067811865476;
pub const CL_M_E_F: f64 = 2.718281828;
pub const CL_M_LOG2E_F: f64 = 1.442695041;
pub const CL_M_LOG10E_F: f64 = 0.434294482;
pub const CL_M_LN2_F: f64 = 0.693147181;
pub const CL_M_LN10_F: f64 = 2.302585093;
pub const CL_M_PI_F: f64 = 3.141592654;
pub const CL_M_PI_2_F: f64 = 1.570796327;
pub const CL_M_PI_4_F: f64 = 0.785398163;
pub const CL_M_1_PI_F: f64 = 0.318309886;
pub const CL_M_2_PI_F: f64 = 0.636619772;
pub const CL_M_2_SQRTPI_F: f64 = 1.128379167;
pub const CL_M_SQRT2_F: f64 = 1.414213562;
pub const CL_M_SQRT1_2_F: f64 = 0.707106781;
pub const CL_MAXFLOAT: f64 = 340282346638528860000000000000000000000.0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MM_HINT_ET0: u32 = 7;
pub const _MM_HINT_ET1: u32 = 6;
pub const _MM_HINT_T0: u32 = 3;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 1;
pub const _MM_HINT_NTA: u32 = 0;
pub const _MM_EXCEPT_INVALID: u32 = 1;
pub const _MM_EXCEPT_DENORM: u32 = 2;
pub const _MM_EXCEPT_DIV_ZERO: u32 = 4;
pub const _MM_EXCEPT_OVERFLOW: u32 = 8;
pub const _MM_EXCEPT_UNDERFLOW: u32 = 16;
pub const _MM_EXCEPT_INEXACT: u32 = 32;
pub const _MM_EXCEPT_MASK: u32 = 63;
pub const _MM_MASK_INVALID: u32 = 128;
pub const _MM_MASK_DENORM: u32 = 256;
pub const _MM_MASK_DIV_ZERO: u32 = 512;
pub const _MM_MASK_OVERFLOW: u32 = 1024;
pub const _MM_MASK_UNDERFLOW: u32 = 2048;
pub const _MM_MASK_INEXACT: u32 = 4096;
pub const _MM_MASK_MASK: u32 = 8064;
pub const _MM_ROUND_NEAREST: u32 = 0;
pub const _MM_ROUND_DOWN: u32 = 8192;
pub const _MM_ROUND_UP: u32 = 16384;
pub const _MM_ROUND_TOWARD_ZERO: u32 = 24576;
pub const _MM_ROUND_MASK: u32 = 24576;
pub const _MM_FLUSH_ZERO_MASK: u32 = 32768;
pub const _MM_FLUSH_ZERO_ON: u32 = 32768;
pub const _MM_FLUSH_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_ON: u32 = 64;
pub const _MM_DENORMALS_ZERO_OFF: u32 = 0;
pub const _MM_DENORMALS_ZERO_MASK: u32 = 64;
pub const __CL_FLOAT4__: u32 = 1;
pub const __CL_UCHAR16__: u32 = 1;
pub const __CL_CHAR16__: u32 = 1;
pub const __CL_USHORT8__: u32 = 1;
pub const __CL_SHORT8__: u32 = 1;
pub const __CL_INT4__: u32 = 1;
pub const __CL_UINT4__: u32 = 1;
pub const __CL_ULONG2__: u32 = 1;
pub const __CL_LONG2__: u32 = 1;
pub const __CL_DOUBLE2__: u32 = 1;
pub const __CL_UCHAR8__: u32 = 1;
pub const __CL_CHAR8__: u32 = 1;
pub const __CL_USHORT4__: u32 = 1;
pub const __CL_SHORT4__: u32 = 1;
pub const __CL_INT2__: u32 = 1;
pub const __CL_UINT2__: u32 = 1;
pub const __CL_ULONG1__: u32 = 1;
pub const __CL_LONG1__: u32 = 1;
pub const __CL_FLOAT2__: u32 = 1;
pub const __CL_HAS_ANON_STRUCT__: u32 = 1;
pub const CL_HAS_NAMED_VECTOR_FIELDS: u32 = 1;
pub const CL_HAS_HI_LO_VECTOR_FIELDS: u32 = 1;
pub const CL_NAME_VERSION_MAX_NAME_SIZE: u32 = 64;
pub const CL_SUCCESS: i32 = 0;
pub const CL_DEVICE_NOT_FOUND: i32 = -1;
pub const CL_DEVICE_NOT_AVAILABLE: i32 = -2;
pub const CL_COMPILER_NOT_AVAILABLE: i32 = -3;
pub const CL_MEM_OBJECT_ALLOCATION_FAILURE: i32 = -4;
pub const CL_OUT_OF_RESOURCES: i32 = -5;
pub const CL_OUT_OF_HOST_MEMORY: i32 = -6;
pub const CL_PROFILING_INFO_NOT_AVAILABLE: i32 = -7;
pub const CL_MEM_COPY_OVERLAP: i32 = -8;
pub const CL_IMAGE_FORMAT_MISMATCH: i32 = -9;
pub const CL_IMAGE_FORMAT_NOT_SUPPORTED: i32 = -10;
pub const CL_BUILD_PROGRAM_FAILURE: i32 = -11;
pub const CL_MAP_FAILURE: i32 = -12;
pub const CL_MISALIGNED_SUB_BUFFER_OFFSET: i32 = -13;
pub const CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST: i32 = -14;
pub const CL_COMPILE_PROGRAM_FAILURE: i32 = -15;
pub const CL_LINKER_NOT_AVAILABLE: i32 = -16;
pub const CL_LINK_PROGRAM_FAILURE: i32 = -17;
pub const CL_DEVICE_PARTITION_FAILED: i32 = -18;
pub const CL_KERNEL_ARG_INFO_NOT_AVAILABLE: i32 = -19;
pub const CL_INVALID_VALUE: i32 = -30;
pub const CL_INVALID_DEVICE_TYPE: i32 = -31;
pub const CL_INVALID_PLATFORM: i32 = -32;
pub const CL_INVALID_DEVICE: i32 = -33;
pub const CL_INVALID_CONTEXT: i32 = -34;
pub const CL_INVALID_QUEUE_PROPERTIES: i32 = -35;
pub const CL_INVALID_COMMAND_QUEUE: i32 = -36;
pub const CL_INVALID_HOST_PTR: i32 = -37;
pub const CL_INVALID_MEM_OBJECT: i32 = -38;
pub const CL_INVALID_IMAGE_FORMAT_DESCRIPTOR: i32 = -39;
pub const CL_INVALID_IMAGE_SIZE: i32 = -40;
pub const CL_INVALID_SAMPLER: i32 = -41;
pub const CL_INVALID_BINARY: i32 = -42;
pub const CL_INVALID_BUILD_OPTIONS: i32 = -43;
pub const CL_INVALID_PROGRAM: i32 = -44;
pub const CL_INVALID_PROGRAM_EXECUTABLE: i32 = -45;
pub const CL_INVALID_KERNEL_NAME: i32 = -46;
pub const CL_INVALID_KERNEL_DEFINITION: i32 = -47;
pub const CL_INVALID_KERNEL: i32 = -48;
pub const CL_INVALID_ARG_INDEX: i32 = -49;
pub const CL_INVALID_ARG_VALUE: i32 = -50;
pub const CL_INVALID_ARG_SIZE: i32 = -51;
pub const CL_INVALID_KERNEL_ARGS: i32 = -52;
pub const CL_INVALID_WORK_DIMENSION: i32 = -53;
pub const CL_INVALID_WORK_GROUP_SIZE: i32 = -54;
pub const CL_INVALID_WORK_ITEM_SIZE: i32 = -55;
pub const CL_INVALID_GLOBAL_OFFSET: i32 = -56;
pub const CL_INVALID_EVENT_WAIT_LIST: i32 = -57;
pub const CL_INVALID_EVENT: i32 = -58;
pub const CL_INVALID_OPERATION: i32 = -59;
pub const CL_INVALID_GL_OBJECT: i32 = -60;
pub const CL_INVALID_BUFFER_SIZE: i32 = -61;
pub const CL_INVALID_MIP_LEVEL: i32 = -62;
pub const CL_INVALID_GLOBAL_WORK_SIZE: i32 = -63;
pub const CL_INVALID_PROPERTY: i32 = -64;
pub const CL_INVALID_IMAGE_DESCRIPTOR: i32 = -65;
pub const CL_INVALID_COMPILER_OPTIONS: i32 = -66;
pub const CL_INVALID_LINKER_OPTIONS: i32 = -67;
pub const CL_INVALID_DEVICE_PARTITION_COUNT: i32 = -68;
pub const CL_INVALID_PIPE_SIZE: i32 = -69;
pub const CL_INVALID_DEVICE_QUEUE: i32 = -70;
pub const CL_INVALID_SPEC_ID: i32 = -71;
pub const CL_MAX_SIZE_RESTRICTION_EXCEEDED: i32 = -72;
pub const CL_FALSE: u32 = 0;
pub const CL_TRUE: u32 = 1;
pub const CL_BLOCKING: u32 = 1;
pub const CL_NON_BLOCKING: u32 = 0;
pub const CL_PLATFORM_PROFILE: u32 = 2304;
pub const CL_PLATFORM_VERSION: u32 = 2305;
pub const CL_PLATFORM_NAME: u32 = 2306;
pub const CL_PLATFORM_VENDOR: u32 = 2307;
pub const CL_PLATFORM_EXTENSIONS: u32 = 2308;
pub const CL_PLATFORM_HOST_TIMER_RESOLUTION: u32 = 2309;
pub const CL_PLATFORM_NUMERIC_VERSION: u32 = 2310;
pub const CL_PLATFORM_EXTENSIONS_WITH_VERSION: u32 = 2311;
pub const CL_DEVICE_TYPE_DEFAULT: u32 = 1;
pub const CL_DEVICE_TYPE_CPU: u32 = 2;
pub const CL_DEVICE_TYPE_GPU: u32 = 4;
pub const CL_DEVICE_TYPE_ACCELERATOR: u32 = 8;
pub const CL_DEVICE_TYPE_CUSTOM: u32 = 16;
pub const CL_DEVICE_TYPE_ALL: u32 = 4294967295;
pub const CL_DEVICE_TYPE: u32 = 4096;
pub const CL_DEVICE_VENDOR_ID: u32 = 4097;
pub const CL_DEVICE_MAX_COMPUTE_UNITS: u32 = 4098;
pub const CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS: u32 = 4099;
pub const CL_DEVICE_MAX_WORK_GROUP_SIZE: u32 = 4100;
pub const CL_DEVICE_MAX_WORK_ITEM_SIZES: u32 = 4101;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR: u32 = 4102;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT: u32 = 4103;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT: u32 = 4104;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG: u32 = 4105;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT: u32 = 4106;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE: u32 = 4107;
pub const CL_DEVICE_MAX_CLOCK_FREQUENCY: u32 = 4108;
pub const CL_DEVICE_ADDRESS_BITS: u32 = 4109;
pub const CL_DEVICE_MAX_READ_IMAGE_ARGS: u32 = 4110;
pub const CL_DEVICE_MAX_WRITE_IMAGE_ARGS: u32 = 4111;
pub const CL_DEVICE_MAX_MEM_ALLOC_SIZE: u32 = 4112;
pub const CL_DEVICE_IMAGE2D_MAX_WIDTH: u32 = 4113;
pub const CL_DEVICE_IMAGE2D_MAX_HEIGHT: u32 = 4114;
pub const CL_DEVICE_IMAGE3D_MAX_WIDTH: u32 = 4115;
pub const CL_DEVICE_IMAGE3D_MAX_HEIGHT: u32 = 4116;
pub const CL_DEVICE_IMAGE3D_MAX_DEPTH: u32 = 4117;
pub const CL_DEVICE_IMAGE_SUPPORT: u32 = 4118;
pub const CL_DEVICE_MAX_PARAMETER_SIZE: u32 = 4119;
pub const CL_DEVICE_MAX_SAMPLERS: u32 = 4120;
pub const CL_DEVICE_MEM_BASE_ADDR_ALIGN: u32 = 4121;
pub const CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE: u32 = 4122;
pub const CL_DEVICE_SINGLE_FP_CONFIG: u32 = 4123;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_TYPE: u32 = 4124;
pub const CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE: u32 = 4125;
pub const CL_DEVICE_GLOBAL_MEM_CACHE_SIZE: u32 = 4126;
pub const CL_DEVICE_GLOBAL_MEM_SIZE: u32 = 4127;
pub const CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE: u32 = 4128;
pub const CL_DEVICE_MAX_CONSTANT_ARGS: u32 = 4129;
pub const CL_DEVICE_LOCAL_MEM_TYPE: u32 = 4130;
pub const CL_DEVICE_LOCAL_MEM_SIZE: u32 = 4131;
pub const CL_DEVICE_ERROR_CORRECTION_SUPPORT: u32 = 4132;
pub const CL_DEVICE_PROFILING_TIMER_RESOLUTION: u32 = 4133;
pub const CL_DEVICE_ENDIAN_LITTLE: u32 = 4134;
pub const CL_DEVICE_AVAILABLE: u32 = 4135;
pub const CL_DEVICE_COMPILER_AVAILABLE: u32 = 4136;
pub const CL_DEVICE_EXECUTION_CAPABILITIES: u32 = 4137;
pub const CL_DEVICE_QUEUE_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_QUEUE_ON_HOST_PROPERTIES: u32 = 4138;
pub const CL_DEVICE_NAME: u32 = 4139;
pub const CL_DEVICE_VENDOR: u32 = 4140;
pub const CL_DRIVER_VERSION: u32 = 4141;
pub const CL_DEVICE_PROFILE: u32 = 4142;
pub const CL_DEVICE_VERSION: u32 = 4143;
pub const CL_DEVICE_EXTENSIONS: u32 = 4144;
pub const CL_DEVICE_PLATFORM: u32 = 4145;
pub const CL_DEVICE_DOUBLE_FP_CONFIG: u32 = 4146;
pub const CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF: u32 = 4148;
pub const CL_DEVICE_HOST_UNIFIED_MEMORY: u32 = 4149;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR: u32 = 4150;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT: u32 = 4151;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_INT: u32 = 4152;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG: u32 = 4153;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT: u32 = 4154;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE: u32 = 4155;
pub const CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF: u32 = 4156;
pub const CL_DEVICE_OPENCL_C_VERSION: u32 = 4157;
pub const CL_DEVICE_LINKER_AVAILABLE: u32 = 4158;
pub const CL_DEVICE_BUILT_IN_KERNELS: u32 = 4159;
pub const CL_DEVICE_IMAGE_MAX_BUFFER_SIZE: u32 = 4160;
pub const CL_DEVICE_IMAGE_MAX_ARRAY_SIZE: u32 = 4161;
pub const CL_DEVICE_PARENT_DEVICE: u32 = 4162;
pub const CL_DEVICE_PARTITION_MAX_SUB_DEVICES: u32 = 4163;
pub const CL_DEVICE_PARTITION_PROPERTIES: u32 = 4164;
pub const CL_DEVICE_PARTITION_AFFINITY_DOMAIN: u32 = 4165;
pub const CL_DEVICE_PARTITION_TYPE: u32 = 4166;
pub const CL_DEVICE_REFERENCE_COUNT: u32 = 4167;
pub const CL_DEVICE_PREFERRED_INTEROP_USER_SYNC: u32 = 4168;
pub const CL_DEVICE_PRINTF_BUFFER_SIZE: u32 = 4169;
pub const CL_DEVICE_IMAGE_PITCH_ALIGNMENT: u32 = 4170;
pub const CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT: u32 = 4171;
pub const CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS: u32 = 4172;
pub const CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE: u32 = 4173;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES: u32 = 4174;
pub const CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE: u32 = 4175;
pub const CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE: u32 = 4176;
pub const CL_DEVICE_MAX_ON_DEVICE_QUEUES: u32 = 4177;
pub const CL_DEVICE_MAX_ON_DEVICE_EVENTS: u32 = 4178;
pub const CL_DEVICE_SVM_CAPABILITIES: u32 = 4179;
pub const CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE: u32 = 4180;
pub const CL_DEVICE_MAX_PIPE_ARGS: u32 = 4181;
pub const CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS: u32 = 4182;
pub const CL_DEVICE_PIPE_MAX_PACKET_SIZE: u32 = 4183;
pub const CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT: u32 = 4184;
pub const CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT: u32 = 4185;
pub const CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT: u32 = 4186;
pub const CL_DEVICE_IL_VERSION: u32 = 4187;
pub const CL_DEVICE_MAX_NUM_SUB_GROUPS: u32 = 4188;
pub const CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS: u32 = 4189;
pub const CL_DEVICE_NUMERIC_VERSION: u32 = 4190;
pub const CL_DEVICE_EXTENSIONS_WITH_VERSION: u32 = 4192;
pub const CL_DEVICE_ILS_WITH_VERSION: u32 = 4193;
pub const CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION: u32 = 4194;
pub const CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES: u32 = 4195;
pub const CL_DEVICE_ATOMIC_FENCE_CAPABILITIES: u32 = 4196;
pub const CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT: u32 = 4197;
pub const CL_DEVICE_OPENCL_C_ALL_VERSIONS: u32 = 4198;
pub const CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: u32 = 4199;
pub const CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT: u32 = 4200;
pub const CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT: u32 = 4201;
pub const CL_DEVICE_OPENCL_C_FEATURES: u32 = 4207;
pub const CL_DEVICE_DEVICE_ENQUEUE_CAPABILITIES: u32 = 4208;
pub const CL_DEVICE_PIPE_SUPPORT: u32 = 4209;
pub const CL_DEVICE_LATEST_CONFORMANCE_VERSION_PASSED: u32 = 4210;
pub const CL_FP_DENORM: u32 = 1;
pub const CL_FP_INF_NAN: u32 = 2;
pub const CL_FP_ROUND_TO_NEAREST: u32 = 4;
pub const CL_FP_ROUND_TO_ZERO: u32 = 8;
pub const CL_FP_ROUND_TO_INF: u32 = 16;
pub const CL_FP_FMA: u32 = 32;
pub const CL_FP_SOFT_FLOAT: u32 = 64;
pub const CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: u32 = 128;
pub const CL_NONE: u32 = 0;
pub const CL_READ_ONLY_CACHE: u32 = 1;
pub const CL_READ_WRITE_CACHE: u32 = 2;
pub const CL_LOCAL: u32 = 1;
pub const CL_GLOBAL: u32 = 2;
pub const CL_EXEC_KERNEL: u32 = 1;
pub const CL_EXEC_NATIVE_KERNEL: u32 = 2;
pub const CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE: u32 = 1;
pub const CL_QUEUE_PROFILING_ENABLE: u32 = 2;
pub const CL_QUEUE_ON_DEVICE: u32 = 4;
pub const CL_QUEUE_ON_DEVICE_DEFAULT: u32 = 8;
pub const CL_CONTEXT_REFERENCE_COUNT: u32 = 4224;
pub const CL_CONTEXT_DEVICES: u32 = 4225;
pub const CL_CONTEXT_PROPERTIES: u32 = 4226;
pub const CL_CONTEXT_NUM_DEVICES: u32 = 4227;
pub const CL_CONTEXT_PLATFORM: u32 = 4228;
pub const CL_CONTEXT_INTEROP_USER_SYNC: u32 = 4229;
pub const CL_DEVICE_PARTITION_EQUALLY: u32 = 4230;
pub const CL_DEVICE_PARTITION_BY_COUNTS: u32 = 4231;
pub const CL_DEVICE_PARTITION_BY_COUNTS_LIST_END: u32 = 0;
pub const CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN: u32 = 4232;
pub const CL_DEVICE_AFFINITY_DOMAIN_NUMA: u32 = 1;
pub const CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE: u32 = 2;
pub const CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE: u32 = 4;
pub const CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE: u32 = 8;
pub const CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE: u32 = 16;
pub const CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE: u32 = 32;
pub const CL_DEVICE_SVM_COARSE_GRAIN_BUFFER: u32 = 1;
pub const CL_DEVICE_SVM_FINE_GRAIN_BUFFER: u32 = 2;
pub const CL_DEVICE_SVM_FINE_GRAIN_SYSTEM: u32 = 4;
pub const CL_DEVICE_SVM_ATOMICS: u32 = 8;
pub const CL_QUEUE_CONTEXT: u32 = 4240;
pub const CL_QUEUE_DEVICE: u32 = 4241;
pub const CL_QUEUE_REFERENCE_COUNT: u32 = 4242;
pub const CL_QUEUE_PROPERTIES: u32 = 4243;
pub const CL_QUEUE_SIZE: u32 = 4244;
pub const CL_QUEUE_DEVICE_DEFAULT: u32 = 4245;
pub const CL_QUEUE_PROPERTIES_ARRAY: u32 = 4248;
pub const CL_MEM_READ_WRITE: u32 = 1;
pub const CL_MEM_WRITE_ONLY: u32 = 2;
pub const CL_MEM_READ_ONLY: u32 = 4;
pub const CL_MEM_USE_HOST_PTR: u32 = 8;
pub const CL_MEM_ALLOC_HOST_PTR: u32 = 16;
pub const CL_MEM_COPY_HOST_PTR: u32 = 32;
pub const CL_MEM_HOST_WRITE_ONLY: u32 = 128;
pub const CL_MEM_HOST_READ_ONLY: u32 = 256;
pub const CL_MEM_HOST_NO_ACCESS: u32 = 512;
pub const CL_MEM_SVM_FINE_GRAIN_BUFFER: u32 = 1024;
pub const CL_MEM_SVM_ATOMICS: u32 = 2048;
pub const CL_MEM_KERNEL_READ_AND_WRITE: u32 = 4096;
pub const CL_MIGRATE_MEM_OBJECT_HOST: u32 = 1;
pub const CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED: u32 = 2;
pub const CL_R: u32 = 4272;
pub const CL_A: u32 = 4273;
pub const CL_RG: u32 = 4274;
pub const CL_RA: u32 = 4275;
pub const CL_RGB: u32 = 4276;
pub const CL_RGBA: u32 = 4277;
pub const CL_BGRA: u32 = 4278;
pub const CL_ARGB: u32 = 4279;
pub const CL_INTENSITY: u32 = 4280;
pub const CL_LUMINANCE: u32 = 4281;
pub const CL_Rx: u32 = 4282;
pub const CL_RGx: u32 = 4283;
pub const CL_RGBx: u32 = 4284;
pub const CL_DEPTH: u32 = 4285;
pub const CL_DEPTH_STENCIL: u32 = 4286;
pub const CL_sRGB: u32 = 4287;
pub const CL_sRGBx: u32 = 4288;
pub const CL_sRGBA: u32 = 4289;
pub const CL_sBGRA: u32 = 4290;
pub const CL_ABGR: u32 = 4291;
pub const CL_SNORM_INT8: u32 = 4304;
pub const CL_SNORM_INT16: u32 = 4305;
pub const CL_UNORM_INT8: u32 = 4306;
pub const CL_UNORM_INT16: u32 = 4307;
pub const CL_UNORM_SHORT_565: u32 = 4308;
pub const CL_UNORM_SHORT_555: u32 = 4309;
pub const CL_UNORM_INT_101010: u32 = 4310;
pub const CL_SIGNED_INT8: u32 = 4311;
pub const CL_SIGNED_INT16: u32 = 4312;
pub const CL_SIGNED_INT32: u32 = 4313;
pub const CL_UNSIGNED_INT8: u32 = 4314;
pub const CL_UNSIGNED_INT16: u32 = 4315;
pub const CL_UNSIGNED_INT32: u32 = 4316;
pub const CL_HALF_FLOAT: u32 = 4317;
pub const CL_FLOAT: u32 = 4318;
pub const CL_UNORM_INT24: u32 = 4319;
pub const CL_UNORM_INT_101010_2: u32 = 4320;
pub const CL_MEM_OBJECT_BUFFER: u32 = 4336;
pub const CL_MEM_OBJECT_IMAGE2D: u32 = 4337;
pub const CL_MEM_OBJECT_IMAGE3D: u32 = 4338;
pub const CL_MEM_OBJECT_IMAGE2D_ARRAY: u32 = 4339;
pub const CL_MEM_OBJECT_IMAGE1D: u32 = 4340;
pub const CL_MEM_OBJECT_IMAGE1D_ARRAY: u32 = 4341;
pub const CL_MEM_OBJECT_IMAGE1D_BUFFER: u32 = 4342;
pub const CL_MEM_OBJECT_PIPE: u32 = 4343;
pub const CL_MEM_TYPE: u32 = 4352;
pub const CL_MEM_FLAGS: u32 = 4353;
pub const CL_MEM_SIZE: u32 = 4354;
pub const CL_MEM_HOST_PTR: u32 = 4355;
pub const CL_MEM_MAP_COUNT: u32 = 4356;
pub const CL_MEM_REFERENCE_COUNT: u32 = 4357;
pub const CL_MEM_CONTEXT: u32 = 4358;
pub const CL_MEM_ASSOCIATED_MEMOBJECT: u32 = 4359;
pub const CL_MEM_OFFSET: u32 = 4360;
pub const CL_MEM_USES_SVM_POINTER: u32 = 4361;
pub const CL_MEM_PROPERTIES: u32 = 4362;
pub const CL_IMAGE_FORMAT: u32 = 4368;
pub const CL_IMAGE_ELEMENT_SIZE: u32 = 4369;
pub const CL_IMAGE_ROW_PITCH: u32 = 4370;
pub const CL_IMAGE_SLICE_PITCH: u32 = 4371;
pub const CL_IMAGE_WIDTH: u32 = 4372;
pub const CL_IMAGE_HEIGHT: u32 = 4373;
pub const CL_IMAGE_DEPTH: u32 = 4374;
pub const CL_IMAGE_ARRAY_SIZE: u32 = 4375;
pub const CL_IMAGE_BUFFER: u32 = 4376;
pub const CL_IMAGE_NUM_MIP_LEVELS: u32 = 4377;
pub const CL_IMAGE_NUM_SAMPLES: u32 = 4378;
pub const CL_PIPE_PACKET_SIZE: u32 = 4384;
pub const CL_PIPE_MAX_PACKETS: u32 = 4385;
pub const CL_PIPE_PROPERTIES: u32 = 4386;
pub const CL_ADDRESS_NONE: u32 = 4400;
pub const CL_ADDRESS_CLAMP_TO_EDGE: u32 = 4401;
pub const CL_ADDRESS_CLAMP: u32 = 4402;
pub const CL_ADDRESS_REPEAT: u32 = 4403;
pub const CL_ADDRESS_MIRRORED_REPEAT: u32 = 4404;
pub const CL_FILTER_NEAREST: u32 = 4416;
pub const CL_FILTER_LINEAR: u32 = 4417;
pub const CL_SAMPLER_REFERENCE_COUNT: u32 = 4432;
pub const CL_SAMPLER_CONTEXT: u32 = 4433;
pub const CL_SAMPLER_NORMALIZED_COORDS: u32 = 4434;
pub const CL_SAMPLER_ADDRESSING_MODE: u32 = 4435;
pub const CL_SAMPLER_FILTER_MODE: u32 = 4436;
pub const CL_SAMPLER_MIP_FILTER_MODE: u32 = 4437;
pub const CL_SAMPLER_LOD_MIN: u32 = 4438;
pub const CL_SAMPLER_LOD_MAX: u32 = 4439;
pub const CL_SAMPLER_PROPERTIES: u32 = 4440;
pub const CL_MAP_READ: u32 = 1;
pub const CL_MAP_WRITE: u32 = 2;
pub const CL_MAP_WRITE_INVALIDATE_REGION: u32 = 4;
pub const CL_PROGRAM_REFERENCE_COUNT: u32 = 4448;
pub const CL_PROGRAM_CONTEXT: u32 = 4449;
pub const CL_PROGRAM_NUM_DEVICES: u32 = 4450;
pub const CL_PROGRAM_DEVICES: u32 = 4451;
pub const CL_PROGRAM_SOURCE: u32 = 4452;
pub const CL_PROGRAM_BINARY_SIZES: u32 = 4453;
pub const CL_PROGRAM_BINARIES: u32 = 4454;
pub const CL_PROGRAM_NUM_KERNELS: u32 = 4455;
pub const CL_PROGRAM_KERNEL_NAMES: u32 = 4456;
pub const CL_PROGRAM_IL: u32 = 4457;
pub const CL_PROGRAM_SCOPE_GLOBAL_CTORS_PRESENT: u32 = 4458;
pub const CL_PROGRAM_SCOPE_GLOBAL_DTORS_PRESENT: u32 = 4459;
pub const CL_PROGRAM_BUILD_STATUS: u32 = 4481;
pub const CL_PROGRAM_BUILD_OPTIONS: u32 = 4482;
pub const CL_PROGRAM_BUILD_LOG: u32 = 4483;
pub const CL_PROGRAM_BINARY_TYPE: u32 = 4484;
pub const CL_PROGRAM_BUILD_GLOBAL_VARIABLE_TOTAL_SIZE: u32 = 4485;
pub const CL_PROGRAM_BINARY_TYPE_NONE: u32 = 0;
pub const CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT: u32 = 1;
pub const CL_PROGRAM_BINARY_TYPE_LIBRARY: u32 = 2;
pub const CL_PROGRAM_BINARY_TYPE_EXECUTABLE: u32 = 4;
pub const CL_BUILD_SUCCESS: u32 = 0;
pub const CL_BUILD_NONE: i32 = -1;
pub const CL_BUILD_ERROR: i32 = -2;
pub const CL_BUILD_IN_PROGRESS: i32 = -3;
pub const CL_KERNEL_FUNCTION_NAME: u32 = 4496;
pub const CL_KERNEL_NUM_ARGS: u32 = 4497;
pub const CL_KERNEL_REFERENCE_COUNT: u32 = 4498;
pub const CL_KERNEL_CONTEXT: u32 = 4499;
pub const CL_KERNEL_PROGRAM: u32 = 4500;
pub const CL_KERNEL_ATTRIBUTES: u32 = 4501;
pub const CL_KERNEL_ARG_ADDRESS_QUALIFIER: u32 = 4502;
pub const CL_KERNEL_ARG_ACCESS_QUALIFIER: u32 = 4503;
pub const CL_KERNEL_ARG_TYPE_NAME: u32 = 4504;
pub const CL_KERNEL_ARG_TYPE_QUALIFIER: u32 = 4505;
pub const CL_KERNEL_ARG_NAME: u32 = 4506;
pub const CL_KERNEL_ARG_ADDRESS_GLOBAL: u32 = 4507;
pub const CL_KERNEL_ARG_ADDRESS_LOCAL: u32 = 4508;
pub const CL_KERNEL_ARG_ADDRESS_CONSTANT: u32 = 4509;
pub const CL_KERNEL_ARG_ADDRESS_PRIVATE: u32 = 4510;
pub const CL_KERNEL_ARG_ACCESS_READ_ONLY: u32 = 4512;
pub const CL_KERNEL_ARG_ACCESS_WRITE_ONLY: u32 = 4513;
pub const CL_KERNEL_ARG_ACCESS_READ_WRITE: u32 = 4514;
pub const CL_KERNEL_ARG_ACCESS_NONE: u32 = 4515;
pub const CL_KERNEL_ARG_TYPE_NONE: u32 = 0;
pub const CL_KERNEL_ARG_TYPE_CONST: u32 = 1;
pub const CL_KERNEL_ARG_TYPE_RESTRICT: u32 = 2;
pub const CL_KERNEL_ARG_TYPE_VOLATILE: u32 = 4;
pub const CL_KERNEL_ARG_TYPE_PIPE: u32 = 8;
pub const CL_KERNEL_WORK_GROUP_SIZE: u32 = 4528;
pub const CL_KERNEL_COMPILE_WORK_GROUP_SIZE: u32 = 4529;
pub const CL_KERNEL_LOCAL_MEM_SIZE: u32 = 4530;
pub const CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE: u32 = 4531;
pub const CL_KERNEL_PRIVATE_MEM_SIZE: u32 = 4532;
pub const CL_KERNEL_GLOBAL_WORK_SIZE: u32 = 4533;
pub const CL_KERNEL_MAX_SUB_GROUP_SIZE_FOR_NDRANGE: u32 = 8243;
pub const CL_KERNEL_SUB_GROUP_COUNT_FOR_NDRANGE: u32 = 8244;
pub const CL_KERNEL_LOCAL_SIZE_FOR_SUB_GROUP_COUNT: u32 = 4536;
pub const CL_KERNEL_MAX_NUM_SUB_GROUPS: u32 = 4537;
pub const CL_KERNEL_COMPILE_NUM_SUB_GROUPS: u32 = 4538;
pub const CL_KERNEL_EXEC_INFO_SVM_PTRS: u32 = 4534;
pub const CL_KERNEL_EXEC_INFO_SVM_FINE_GRAIN_SYSTEM: u32 = 4535;
pub const CL_EVENT_COMMAND_QUEUE: u32 = 4560;
pub const CL_EVENT_COMMAND_TYPE: u32 = 4561;
pub const CL_EVENT_REFERENCE_COUNT: u32 = 4562;
pub const CL_EVENT_COMMAND_EXECUTION_STATUS: u32 = 4563;
pub const CL_EVENT_CONTEXT: u32 = 4564;
pub const CL_COMMAND_NDRANGE_KERNEL: u32 = 4592;
pub const CL_COMMAND_TASK: u32 = 4593;
pub const CL_COMMAND_NATIVE_KERNEL: u32 = 4594;
pub const CL_COMMAND_READ_BUFFER: u32 = 4595;
pub const CL_COMMAND_WRITE_BUFFER: u32 = 4596;
pub const CL_COMMAND_COPY_BUFFER: u32 = 4597;
pub const CL_COMMAND_READ_IMAGE: u32 = 4598;
pub const CL_COMMAND_WRITE_IMAGE: u32 = 4599;
pub const CL_COMMAND_COPY_IMAGE: u32 = 4600;
pub const CL_COMMAND_COPY_IMAGE_TO_BUFFER: u32 = 4601;
pub const CL_COMMAND_COPY_BUFFER_TO_IMAGE: u32 = 4602;
pub const CL_COMMAND_MAP_BUFFER: u32 = 4603;
pub const CL_COMMAND_MAP_IMAGE: u32 = 4604;
pub const CL_COMMAND_UNMAP_MEM_OBJECT: u32 = 4605;
pub const CL_COMMAND_MARKER: u32 = 4606;
pub const CL_COMMAND_ACQUIRE_GL_OBJECTS: u32 = 4607;
pub const CL_COMMAND_RELEASE_GL_OBJECTS: u32 = 4608;
pub const CL_COMMAND_READ_BUFFER_RECT: u32 = 4609;
pub const CL_COMMAND_WRITE_BUFFER_RECT: u32 = 4610;
pub const CL_COMMAND_COPY_BUFFER_RECT: u32 = 4611;
pub const CL_COMMAND_USER: u32 = 4612;
pub const CL_COMMAND_BARRIER: u32 = 4613;
pub const CL_COMMAND_MIGRATE_MEM_OBJECTS: u32 = 4614;
pub const CL_COMMAND_FILL_BUFFER: u32 = 4615;
pub const CL_COMMAND_FILL_IMAGE: u32 = 4616;
pub const CL_COMMAND_SVM_FREE: u32 = 4617;
pub const CL_COMMAND_SVM_MEMCPY: u32 = 4618;
pub const CL_COMMAND_SVM_MEMFILL: u32 = 4619;
pub const CL_COMMAND_SVM_MAP: u32 = 4620;
pub const CL_COMMAND_SVM_UNMAP: u32 = 4621;
pub const CL_COMMAND_SVM_MIGRATE_MEM: u32 = 4622;
pub const CL_COMPLETE: u32 = 0;
pub const CL_RUNNING: u32 = 1;
pub const CL_SUBMITTED: u32 = 2;
pub const CL_QUEUED: u32 = 3;
pub const CL_BUFFER_CREATE_TYPE_REGION: u32 = 4640;
pub const CL_PROFILING_COMMAND_QUEUED: u32 = 4736;
pub const CL_PROFILING_COMMAND_SUBMIT: u32 = 4737;
pub const CL_PROFILING_COMMAND_START: u32 = 4738;
pub const CL_PROFILING_COMMAND_END: u32 = 4739;
pub const CL_PROFILING_COMMAND_COMPLETE: u32 = 4740;
pub const CL_DEVICE_ATOMIC_ORDER_RELAXED: u32 = 1;
pub const CL_DEVICE_ATOMIC_ORDER_ACQ_REL: u32 = 2;
pub const CL_DEVICE_ATOMIC_ORDER_SEQ_CST: u32 = 4;
pub const CL_DEVICE_ATOMIC_SCOPE_WORK_ITEM: u32 = 8;
pub const CL_DEVICE_ATOMIC_SCOPE_WORK_GROUP: u32 = 16;
pub const CL_DEVICE_ATOMIC_SCOPE_DEVICE: u32 = 32;
pub const CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES: u32 = 64;
pub const CL_DEVICE_QUEUE_SUPPORTED: u32 = 1;
pub const CL_DEVICE_QUEUE_REPLACEABLE_DEFAULT: u32 = 2;
pub const CL_KHRONOS_VENDOR_ID_CODEPLAY: u32 = 65540;
pub const CL_VERSION_MAJOR_BITS: u32 = 10;
pub const CL_VERSION_MINOR_BITS: u32 = 10;
pub const CL_VERSION_PATCH_BITS: u32 = 12;
pub const CL_VERSION_MAJOR_MASK: u32 = 1023;
pub const CL_VERSION_MINOR_MASK: u32 = 1023;
pub const CL_VERSION_PATCH_MASK: u32 = 4095;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__fsid_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__fsid_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type cl_char = i8;
pub type cl_uchar = u8;
pub type cl_short = i16;
pub type cl_ushort = u16;
pub type cl_int = i32;
pub type cl_uint = u32;
pub type cl_long = i64;
pub type cl_ulong = u64;
pub type cl_half = u16;
pub type cl_float = f32;
pub type cl_double = f64;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    fn test_field___clang_max_align_nonce1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce1)
            )
        );
    }
    test_field___clang_max_align_nonce1();
    fn test_field___clang_max_align_nonce2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<max_align_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(max_align_t),
                "::",
                stringify!(__clang_max_align_nonce2)
            )
        );
    }
    test_field___clang_max_align_nonce2();
}
pub type cl_GLuint = ::std::os::raw::c_uint;
pub type cl_GLint = ::std::os::raw::c_int;
pub type cl_GLenum = ::std::os::raw::c_uint;
pub type __m64 = [::std::os::raw::c_longlong; 1usize];
pub type __v1di = [::std::os::raw::c_longlong; 1usize];
pub type __v2si = [::std::os::raw::c_int; 2usize];
pub type __v4hi = [::std::os::raw::c_short; 4usize];
pub type __v8qi = [::std::os::raw::c_char; 8usize];
pub type __v4si = [::std::os::raw::c_int; 4usize];
pub type __v4sf = [f32; 4usize];
pub type __m128 = [f32; 4usize];
pub type __m128_u = [f32; 4usize];
pub type __v4su = [::std::os::raw::c_uint; 4usize];
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<div_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(div_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    fn test_field_quot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(quot)
            )
        );
    }
    test_field_quot();
    fn test_field_rem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<lldiv_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(lldiv_t),
                "::",
                stringify!(rem)
            )
        );
    }
    test_field_rem();
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_usec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timeval>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timeval),
                "::",
                stringify!(tv_usec)
            )
        );
    }
    test_field_tv_usec();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    fn test_field___fds_bits() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<fd_set>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(fd_set),
                "::",
                stringify!(__fds_bits)
            )
        );
    }
    test_field___fds_bits();
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    fn test_field___low() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
    }
    test_field___low();
    fn test_field___high() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__atomic_wide_counter__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    test_field___high();
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    fn test_field___value64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value64)
            )
        );
    }
    test_field___value64();
    fn test_field___value32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__atomic_wide_counter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__atomic_wide_counter),
                "::",
                stringify!(__value32)
            )
        );
    }
    test_field___value32();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    fn test_field___prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
    }
    test_field___prev();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_slist>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_slist),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    fn test_field___lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
    }
    test_field___lock();
    fn test_field___count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
    }
    test_field___count();
    fn test_field___owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
    }
    test_field___owner();
    fn test_field___nusers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
    }
    test_field___nusers();
    fn test_field___kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
    }
    test_field___kind();
    fn test_field___spins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
    }
    test_field___spins();
    fn test_field___elision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
    }
    test_field___elision();
    fn test_field___list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    test_field___list();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    fn test_field___readers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__readers)
            )
        );
    }
    test_field___readers();
    fn test_field___writers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers)
            )
        );
    }
    test_field___writers();
    fn test_field___wrphase_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__wrphase_futex)
            )
        );
    }
    test_field___wrphase_futex();
    fn test_field___writers_futex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__writers_futex)
            )
        );
    }
    test_field___writers_futex();
    fn test_field___pad3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad3)
            )
        );
    }
    test_field___pad3();
    fn test_field___pad4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad4)
            )
        );
    }
    test_field___pad4();
    fn test_field___cur_writer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__cur_writer)
            )
        );
    }
    test_field___cur_writer();
    fn test_field___shared() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__shared)
            )
        );
    }
    test_field___shared();
    fn test_field___rwelision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__rwelision)
            )
        );
    }
    test_field___rwelision();
    fn test_field___pad1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
            },
            33usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad1)
            )
        );
    }
    test_field___pad1();
    fn test_field___pad2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__pad2)
            )
        );
    }
    test_field___pad2();
    fn test_field___flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_rwlock_arch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_rwlock_arch_t),
                "::",
                stringify!(__flags)
            )
        );
    }
    test_field___flags();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    fn test_field___wseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wseq)
            )
        );
    }
    test_field___wseq();
    fn test_field___g1_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_start)
            )
        );
    }
    test_field___g1_start();
    fn test_field___g_refs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
    }
    test_field___g_refs();
    fn test_field___g_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
    }
    test_field___g_size();
    fn test_field___g1_orig_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
    }
    test_field___g1_orig_size();
    fn test_field___wrefs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
    }
    test_field___wrefs();
    fn test_field___g_signals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    test_field___g_signals();
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__once_flag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__once_flag),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutexattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutexattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_condattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_condattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_attr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_attr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlock_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlock_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_rwlockattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_rwlockattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrier_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrier_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_barrierattr_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_barrierattr_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    fn test_field_fptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(fptr)
            )
        );
    }
    test_field_fptr();
    fn test_field_rptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rptr)
            )
        );
    }
    test_field_rptr();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_rand_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_type)
            )
        );
    }
    test_field_rand_type();
    fn test_field_rand_deg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_deg)
            )
        );
    }
    test_field_rand_deg();
    fn test_field_rand_sep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(rand_sep)
            )
        );
    }
    test_field_rand_sep();
    fn test_field_end_ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<random_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(random_data),
                "::",
                stringify!(end_ptr)
            )
        );
    }
    test_field_end_ptr();
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    fn test_field___x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__x)
            )
        );
    }
    test_field___x();
    fn test_field___old_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__old_x)
            )
        );
    }
    test_field___old_x();
    fn test_field___c() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__c)
            )
        );
    }
    test_field___c();
    fn test_field___init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__init)
            )
        );
    }
    test_field___init();
    fn test_field___a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<drand48_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(drand48_data),
                "::",
                stringify!(__a)
            )
        );
    }
    test_field___a();
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(__i: ::std::os::raw::c_uint);
}
pub type __m128d = [f64; 2usize];
pub type __m128i = [::std::os::raw::c_longlong; 2usize];
pub type __m128d_u = [f64; 2usize];
pub type __m128i_u = [::std::os::raw::c_longlong; 2usize];
pub type __v2df = [f64; 2usize];
pub type __v2di = [::std::os::raw::c_longlong; 2usize];
pub type __v8hi = [::std::os::raw::c_short; 8usize];
pub type __v16qi = [::std::os::raw::c_char; 16usize];
pub type __v2du = [::std::os::raw::c_ulonglong; 2usize];
pub type __v8hu = [::std::os::raw::c_ushort; 8usize];
pub type __v16qu = [::std::os::raw::c_uchar; 16usize];
pub type __v16qs = [::std::os::raw::c_schar; 16usize];
extern "C" {
    pub fn _mm_clflush(__p: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_pause();
}
pub type __cl_float4 = [f32; 4usize];
pub type __cl_uchar16 = [cl_uchar; 16usize];
pub type __cl_char16 = [cl_char; 16usize];
pub type __cl_ushort8 = [cl_ushort; 8usize];
pub type __cl_short8 = [cl_short; 8usize];
pub type __cl_uint4 = [cl_uint; 4usize];
pub type __cl_int4 = [cl_int; 4usize];
pub type __cl_ulong2 = [cl_ulong; 2usize];
pub type __cl_long2 = [cl_long; 2usize];
pub type __cl_double2 = [cl_double; 2usize];
pub type __cl_uchar8 = [cl_uchar; 8usize];
pub type __cl_char8 = [cl_char; 8usize];
pub type __cl_ushort4 = [cl_ushort; 4usize];
pub type __cl_short4 = [cl_short; 4usize];
pub type __cl_uint2 = [cl_uint; 2usize];
pub type __cl_int2 = [cl_int; 2usize];
pub type __cl_ulong1 = [cl_ulong; 1usize];
pub type __cl_long1 = [cl_long; 1usize];
pub type __cl_float2 = [cl_float; 2usize];
#[repr(C)]
#[repr(align(2))]
#[derive(Copy, Clone)]
pub union cl_char2 {
    pub s: [cl_char; 2usize],
    pub __bindgen_anon_1: cl_char2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char2__bindgen_ty_3 {
    pub lo: cl_char,
    pub hi: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_char2__bindgen_ty_3>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_char2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_char2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_char2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union cl_char4 {
    pub s: [cl_char; 4usize],
    pub __bindgen_anon_1: cl_char4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char4__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char4__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char4__bindgen_ty_3 {
    pub lo: cl_char2,
    pub hi: cl_char2,
}
#[test]
fn bindgen_test_layout_cl_char4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_char4__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_char4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_char4() {
    assert_eq!(
        ::std::mem::size_of::<cl_char4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char4>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_char4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
pub type cl_char3 = cl_char4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_char8 {
    pub s: [cl_char; 8usize],
    pub __bindgen_anon_1: cl_char8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char8__bindgen_ty_3,
    pub v8: __cl_char8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char8__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char8__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char8__bindgen_ty_3 {
    pub lo: cl_char4,
    pub hi: cl_char4,
}
#[test]
fn bindgen_test_layout_cl_char8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_char8__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_char8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_char8() {
    assert_eq!(
        ::std::mem::size_of::<cl_char8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_char8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_char8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char8),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_char16 {
    pub s: [cl_char; 16usize],
    pub __bindgen_anon_1: cl_char16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_char16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_char16__bindgen_ty_3,
    pub v8: [__cl_char8; 2usize],
    pub v16: __cl_char16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char16__bindgen_ty_1 {
    pub x: cl_char,
    pub y: cl_char,
    pub z: cl_char,
    pub w: cl_char,
    pub __spacer4: cl_char,
    pub __spacer5: cl_char,
    pub __spacer6: cl_char,
    pub __spacer7: cl_char,
    pub __spacer8: cl_char,
    pub __spacer9: cl_char,
    pub sa: cl_char,
    pub sb: cl_char,
    pub sc: cl_char,
    pub sd: cl_char,
    pub se: cl_char,
    pub sf: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_char16__bindgen_ty_2 {
    pub s0: cl_char,
    pub s1: cl_char,
    pub s2: cl_char,
    pub s3: cl_char,
    pub s4: cl_char,
    pub s5: cl_char,
    pub s6: cl_char,
    pub s7: cl_char,
    pub s8: cl_char,
    pub s9: cl_char,
    pub sA: cl_char,
    pub sB: cl_char,
    pub sC: cl_char,
    pub sD: cl_char,
    pub sE: cl_char,
    pub sF: cl_char,
}
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_char16__bindgen_ty_3 {
    pub lo: cl_char8,
    pub hi: cl_char8,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_char16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_char16__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_char16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_char16() {
    assert_eq!(
        ::std::mem::size_of::<cl_char16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_char16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_char16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_char16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
    fn test_field_v16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_char16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v16) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_char16),
                "::",
                stringify!(v16)
            )
        );
    }
    test_field_v16();
}
#[repr(C)]
#[repr(align(2))]
#[derive(Copy, Clone)]
pub union cl_uchar2 {
    pub s: [cl_uchar; 2usize],
    pub __bindgen_anon_1: cl_uchar2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar2__bindgen_ty_3 {
    pub lo: cl_uchar,
    pub hi: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2__bindgen_ty_3>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2__bindgen_ty_3>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uchar2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar2>(),
        2usize,
        concat!("Size of: ", stringify!(cl_uchar2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_uchar2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union cl_uchar4 {
    pub s: [cl_uchar; 4usize],
    pub __bindgen_anon_1: cl_uchar4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar4__bindgen_ty_3 {
    pub lo: cl_uchar2,
    pub hi: cl_uchar2,
}
#[test]
fn bindgen_test_layout_cl_uchar4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_uchar4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uchar4() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar4>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar4>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uchar4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
pub type cl_uchar3 = cl_uchar4;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uchar8 {
    pub s: [cl_uchar; 8usize],
    pub __bindgen_anon_1: cl_uchar8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar8__bindgen_ty_3,
    pub v8: __cl_uchar8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar8__bindgen_ty_3 {
    pub lo: cl_uchar4,
    pub hi: cl_uchar4,
}
#[test]
fn bindgen_test_layout_cl_uchar8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uchar8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_uchar8() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar8>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uchar8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar8>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uchar8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar8),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uchar16 {
    pub s: [cl_uchar; 16usize],
    pub __bindgen_anon_1: cl_uchar16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uchar16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uchar16__bindgen_ty_3,
    pub v8: [__cl_uchar8; 2usize],
    pub v16: __cl_uchar16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_1 {
    pub x: cl_uchar,
    pub y: cl_uchar,
    pub z: cl_uchar,
    pub w: cl_uchar,
    pub __spacer4: cl_uchar,
    pub __spacer5: cl_uchar,
    pub __spacer6: cl_uchar,
    pub __spacer7: cl_uchar,
    pub __spacer8: cl_uchar,
    pub __spacer9: cl_uchar,
    pub sa: cl_uchar,
    pub sb: cl_uchar,
    pub sc: cl_uchar,
    pub sd: cl_uchar,
    pub se: cl_uchar,
    pub sf: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_2 {
    pub s0: cl_uchar,
    pub s1: cl_uchar,
    pub s2: cl_uchar,
    pub s3: cl_uchar,
    pub s4: cl_uchar,
    pub s5: cl_uchar,
    pub s6: cl_uchar,
    pub s7: cl_uchar,
    pub s8: cl_uchar,
    pub s9: cl_uchar,
    pub sA: cl_uchar,
    pub sB: cl_uchar,
    pub sC: cl_uchar,
    pub sD: cl_uchar,
    pub sE: cl_uchar,
    pub sF: cl_uchar,
}
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            11usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            15usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uchar16__bindgen_ty_3 {
    pub lo: cl_uchar8,
    pub hi: cl_uchar8,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_uchar16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uchar16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uchar16() {
    assert_eq!(
        ::std::mem::size_of::<cl_uchar16>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uchar16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uchar16>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uchar16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
    fn test_field_v16() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uchar16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v16) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uchar16),
                "::",
                stringify!(v16)
            )
        );
    }
    test_field_v16();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union cl_short2 {
    pub s: [cl_short; 2usize],
    pub __bindgen_anon_1: cl_short2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short2__bindgen_ty_3 {
    pub lo: cl_short,
    pub hi: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_short2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_short2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_short2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_short2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_short4 {
    pub s: [cl_short; 4usize],
    pub __bindgen_anon_1: cl_short4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short4__bindgen_ty_3,
    pub v4: __cl_short4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short4__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short4__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_short4__bindgen_ty_3 {
    pub lo: cl_short2,
    pub hi: cl_short2,
}
#[test]
fn bindgen_test_layout_cl_short4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_short4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_short4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_short4() {
    assert_eq!(
        ::std::mem::size_of::<cl_short4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_short4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short4),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
pub type cl_short3 = cl_short4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_short8 {
    pub s: [cl_short; 8usize],
    pub __bindgen_anon_1: cl_short8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short8__bindgen_ty_3,
    pub v4: [__cl_short4; 2usize],
    pub v8: __cl_short8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short8__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short8__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_short8__bindgen_ty_3 {
    pub lo: cl_short4,
    pub hi: cl_short4,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_short8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_short8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_short8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_short8() {
    assert_eq!(
        ::std::mem::size_of::<cl_short8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_short8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short8),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_short16 {
    pub s: [cl_short; 16usize],
    pub __bindgen_anon_1: cl_short16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_short16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_short16__bindgen_ty_3,
    pub v4: [__cl_short4; 4usize],
    pub v8: [__cl_short8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short16__bindgen_ty_1 {
    pub x: cl_short,
    pub y: cl_short,
    pub z: cl_short,
    pub w: cl_short,
    pub __spacer4: cl_short,
    pub __spacer5: cl_short,
    pub __spacer6: cl_short,
    pub __spacer7: cl_short,
    pub __spacer8: cl_short,
    pub __spacer9: cl_short,
    pub sa: cl_short,
    pub sb: cl_short,
    pub sc: cl_short,
    pub sd: cl_short,
    pub se: cl_short,
    pub sf: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_short16__bindgen_ty_2 {
    pub s0: cl_short,
    pub s1: cl_short,
    pub s2: cl_short,
    pub s3: cl_short,
    pub s4: cl_short,
    pub s5: cl_short,
    pub s6: cl_short,
    pub s7: cl_short,
    pub s8: cl_short,
    pub s9: cl_short,
    pub sA: cl_short,
    pub sB: cl_short,
    pub sC: cl_short,
    pub sD: cl_short,
    pub sE: cl_short,
    pub sF: cl_short,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_short16__bindgen_ty_3 {
    pub lo: cl_short8,
    pub hi: cl_short8,
}
#[test]
fn bindgen_test_layout_cl_short16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_short16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_short16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_short16() {
    assert_eq!(
        ::std::mem::size_of::<cl_short16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_short16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_short16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_short16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_short16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_short16),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union cl_ushort2 {
    pub s: [cl_ushort; 2usize],
    pub __bindgen_anon_1: cl_ushort2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort2__bindgen_ty_3 {
    pub lo: cl_ushort,
    pub hi: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ushort2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_ushort2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_ushort2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_ushort4 {
    pub s: [cl_ushort; 4usize],
    pub __bindgen_anon_1: cl_ushort4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort4__bindgen_ty_3,
    pub v4: __cl_ushort4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_ushort4__bindgen_ty_3 {
    pub lo: cl_ushort2,
    pub hi: cl_ushort2,
}
#[test]
fn bindgen_test_layout_cl_ushort4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_ushort4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_ushort4() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ushort4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort4),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
pub type cl_ushort3 = cl_ushort4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ushort8 {
    pub s: [cl_ushort; 8usize],
    pub __bindgen_anon_1: cl_ushort8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort8__bindgen_ty_3,
    pub v4: [__cl_ushort4; 2usize],
    pub v8: __cl_ushort8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_ushort8__bindgen_ty_3 {
    pub lo: cl_ushort4,
    pub hi: cl_ushort4,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_ushort8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ushort8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ushort8() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ushort8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort8),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_ushort16 {
    pub s: [cl_ushort; 16usize],
    pub __bindgen_anon_1: cl_ushort16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ushort16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ushort16__bindgen_ty_3,
    pub v4: [__cl_ushort4; 4usize],
    pub v8: [__cl_ushort8; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_1 {
    pub x: cl_ushort,
    pub y: cl_ushort,
    pub z: cl_ushort,
    pub w: cl_ushort,
    pub __spacer4: cl_ushort,
    pub __spacer5: cl_ushort,
    pub __spacer6: cl_ushort,
    pub __spacer7: cl_ushort,
    pub __spacer8: cl_ushort,
    pub __spacer9: cl_ushort,
    pub sa: cl_ushort,
    pub sb: cl_ushort,
    pub sc: cl_ushort,
    pub sd: cl_ushort,
    pub se: cl_ushort,
    pub sf: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_2 {
    pub s0: cl_ushort,
    pub s1: cl_ushort,
    pub s2: cl_ushort,
    pub s3: cl_ushort,
    pub s4: cl_ushort,
    pub s5: cl_ushort,
    pub s6: cl_ushort,
    pub s7: cl_ushort,
    pub s8: cl_ushort,
    pub s9: cl_ushort,
    pub sA: cl_ushort,
    pub sB: cl_ushort,
    pub sC: cl_ushort,
    pub sD: cl_ushort,
    pub sE: cl_ushort,
    pub sF: cl_ushort,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ushort16__bindgen_ty_3 {
    pub lo: cl_ushort8,
    pub hi: cl_ushort8,
}
#[test]
fn bindgen_test_layout_cl_ushort16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ushort16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ushort16() {
    assert_eq!(
        ::std::mem::size_of::<cl_ushort16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ushort16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ushort16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_ushort16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
    fn test_field_v8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ushort16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v8) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ushort16),
                "::",
                stringify!(v8)
            )
        );
    }
    test_field_v8();
}
#[repr(C)]
#[repr(align(4))]
#[derive(Copy, Clone)]
pub union cl_half2 {
    pub s: [cl_half; 2usize],
    pub __bindgen_anon_1: cl_half2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half2__bindgen_ty_3 {
    pub lo: cl_half,
    pub hi: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_half2__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2__bindgen_ty_3>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_half2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half2>(),
        4usize,
        concat!("Size of: ", stringify!(cl_half2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_half2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[repr(align(8))]
#[derive(Copy, Clone)]
pub union cl_half4 {
    pub s: [cl_half; 4usize],
    pub __bindgen_anon_1: cl_half4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half4__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half4__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half4__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_half4__bindgen_ty_3 {
    pub lo: cl_half2,
    pub hi: cl_half2,
}
#[test]
fn bindgen_test_layout_cl_half4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_half4__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_half4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_half4() {
    assert_eq!(
        ::std::mem::size_of::<cl_half4>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half4>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_half4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
pub type cl_half3 = cl_half4;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_half8 {
    pub s: [cl_half; 8usize],
    pub __bindgen_anon_1: cl_half8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half8__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half8__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half8__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
    pub s4: cl_half,
    pub s5: cl_half,
    pub s6: cl_half,
    pub s7: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_half8__bindgen_ty_3 {
    pub lo: cl_half4,
    pub hi: cl_half4,
}
#[test]
fn bindgen_test_layout_cl_half8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_half8__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_half8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_half8() {
    assert_eq!(
        ::std::mem::size_of::<cl_half8>(),
        16usize,
        concat!("Size of: ", stringify!(cl_half8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half8>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_half8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_half16 {
    pub s: [cl_half; 16usize],
    pub __bindgen_anon_1: cl_half16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_half16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_half16__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half16__bindgen_ty_1 {
    pub x: cl_half,
    pub y: cl_half,
    pub z: cl_half,
    pub w: cl_half,
    pub __spacer4: cl_half,
    pub __spacer5: cl_half,
    pub __spacer6: cl_half,
    pub __spacer7: cl_half,
    pub __spacer8: cl_half,
    pub __spacer9: cl_half,
    pub sa: cl_half,
    pub sb: cl_half,
    pub sc: cl_half,
    pub sd: cl_half,
    pub se: cl_half,
    pub sf: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_half16__bindgen_ty_2 {
    pub s0: cl_half,
    pub s1: cl_half,
    pub s2: cl_half,
    pub s3: cl_half,
    pub s4: cl_half,
    pub s5: cl_half,
    pub s6: cl_half,
    pub s7: cl_half,
    pub s8: cl_half,
    pub s9: cl_half,
    pub sA: cl_half,
    pub sB: cl_half,
    pub sC: cl_half,
    pub sD: cl_half,
    pub sE: cl_half,
    pub sF: cl_half,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_2>(),
        2usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_half16__bindgen_ty_3 {
    pub lo: cl_half8,
    pub hi: cl_half8,
}
#[test]
fn bindgen_test_layout_cl_half16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_half16__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_half16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_half16() {
    assert_eq!(
        ::std::mem::size_of::<cl_half16>(),
        32usize,
        concat!("Size of: ", stringify!(cl_half16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_half16>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_half16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_half16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_half16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_int2 {
    pub s: [cl_int; 2usize],
    pub __bindgen_anon_1: cl_int2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int2__bindgen_ty_3,
    pub v2: __cl_int2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int2__bindgen_ty_3 {
    pub lo: cl_int,
    pub hi: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_int2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_int2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_int2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_int2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_int4 {
    pub s: [cl_int; 4usize],
    pub __bindgen_anon_1: cl_int4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int4__bindgen_ty_3,
    pub v2: [__cl_int2; 2usize],
    pub v4: __cl_int4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int4__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int4__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_int4__bindgen_ty_3 {
    pub lo: cl_int2,
    pub hi: cl_int2,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_int4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_int4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_int4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_int4() {
    assert_eq!(
        ::std::mem::size_of::<cl_int4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int4),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
pub type cl_int3 = cl_int4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_int8 {
    pub s: [cl_int; 8usize],
    pub __bindgen_anon_1: cl_int8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int8__bindgen_ty_3,
    pub v2: [__cl_int2; 4usize],
    pub v4: [__cl_int4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int8__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int8__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_int8__bindgen_ty_3 {
    pub lo: cl_int4,
    pub hi: cl_int4,
}
#[test]
fn bindgen_test_layout_cl_int8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_int8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_int8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_int8() {
    assert_eq!(
        ::std::mem::size_of::<cl_int8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_int8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_int8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int8),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_int16 {
    pub s: [cl_int; 16usize],
    pub __bindgen_anon_1: cl_int16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_int16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_int16__bindgen_ty_3,
    pub v2: [__cl_int2; 8usize],
    pub v4: [__cl_int4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int16__bindgen_ty_1 {
    pub x: cl_int,
    pub y: cl_int,
    pub z: cl_int,
    pub w: cl_int,
    pub __spacer4: cl_int,
    pub __spacer5: cl_int,
    pub __spacer6: cl_int,
    pub __spacer7: cl_int,
    pub __spacer8: cl_int,
    pub __spacer9: cl_int,
    pub sa: cl_int,
    pub sb: cl_int,
    pub sc: cl_int,
    pub sd: cl_int,
    pub se: cl_int,
    pub sf: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_int16__bindgen_ty_2 {
    pub s0: cl_int,
    pub s1: cl_int,
    pub s2: cl_int,
    pub s3: cl_int,
    pub s4: cl_int,
    pub s5: cl_int,
    pub s6: cl_int,
    pub s7: cl_int,
    pub s8: cl_int,
    pub s9: cl_int,
    pub sA: cl_int,
    pub sB: cl_int,
    pub sC: cl_int,
    pub sD: cl_int,
    pub sE: cl_int,
    pub sF: cl_int,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_int16__bindgen_ty_3 {
    pub lo: cl_int8,
    pub hi: cl_int8,
}
#[test]
fn bindgen_test_layout_cl_int16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_int16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_int16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_int16() {
    assert_eq!(
        ::std::mem::size_of::<cl_int16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_int16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_int16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_int16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_int16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_int16),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_uint2 {
    pub s: [cl_uint; 2usize],
    pub __bindgen_anon_1: cl_uint2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint2__bindgen_ty_3,
    pub v2: __cl_uint2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint2__bindgen_ty_3 {
    pub lo: cl_uint,
    pub hi: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_uint2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_uint2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uint2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_uint4 {
    pub s: [cl_uint; 4usize],
    pub __bindgen_anon_1: cl_uint4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint4__bindgen_ty_3,
    pub v2: [__cl_uint2; 2usize],
    pub v4: __cl_uint4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint4__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint4__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_uint4__bindgen_ty_3 {
    pub lo: cl_uint2,
    pub hi: cl_uint2,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_uint4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_uint4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uint4() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint4),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
pub type cl_uint3 = cl_uint4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_uint8 {
    pub s: [cl_uint; 8usize],
    pub __bindgen_anon_1: cl_uint8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint8__bindgen_ty_3,
    pub v2: [__cl_uint2; 4usize],
    pub v4: [__cl_uint4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint8__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint8__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_uint8__bindgen_ty_3 {
    pub lo: cl_uint4,
    pub hi: cl_uint4,
}
#[test]
fn bindgen_test_layout_cl_uint8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_uint8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uint8() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_uint8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint8),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_uint16 {
    pub s: [cl_uint; 16usize],
    pub __bindgen_anon_1: cl_uint16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_uint16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_uint16__bindgen_ty_3,
    pub v2: [__cl_uint2; 8usize],
    pub v4: [__cl_uint4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint16__bindgen_ty_1 {
    pub x: cl_uint,
    pub y: cl_uint,
    pub z: cl_uint,
    pub w: cl_uint,
    pub __spacer4: cl_uint,
    pub __spacer5: cl_uint,
    pub __spacer6: cl_uint,
    pub __spacer7: cl_uint,
    pub __spacer8: cl_uint,
    pub __spacer9: cl_uint,
    pub sa: cl_uint,
    pub sb: cl_uint,
    pub sc: cl_uint,
    pub sd: cl_uint,
    pub se: cl_uint,
    pub sf: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_uint16__bindgen_ty_2 {
    pub s0: cl_uint,
    pub s1: cl_uint,
    pub s2: cl_uint,
    pub s3: cl_uint,
    pub s4: cl_uint,
    pub s5: cl_uint,
    pub s6: cl_uint,
    pub s7: cl_uint,
    pub s8: cl_uint,
    pub s9: cl_uint,
    pub sA: cl_uint,
    pub sB: cl_uint,
    pub sC: cl_uint,
    pub sD: cl_uint,
    pub sE: cl_uint,
    pub sF: cl_uint,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_uint16__bindgen_ty_3 {
    pub lo: cl_uint8,
    pub hi: cl_uint8,
}
#[test]
fn bindgen_test_layout_cl_uint16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_uint16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_uint16() {
    assert_eq!(
        ::std::mem::size_of::<cl_uint16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_uint16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_uint16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_uint16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_uint16),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_long2 {
    pub s: [cl_long; 2usize],
    pub __bindgen_anon_1: cl_long2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long2__bindgen_ty_3,
    pub v2: __cl_long2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long2__bindgen_ty_3 {
    pub lo: cl_long,
    pub hi: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_long2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_long2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_long2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_long4 {
    pub s: [cl_long; 4usize],
    pub __bindgen_anon_1: cl_long4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long4__bindgen_ty_3,
    pub v2: [__cl_long2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long4__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long4__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_long4__bindgen_ty_3 {
    pub lo: cl_long2,
    pub hi: cl_long2,
}
#[test]
fn bindgen_test_layout_cl_long4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_long4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_long4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_long4() {
    assert_eq!(
        ::std::mem::size_of::<cl_long4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_long4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
pub type cl_long3 = cl_long4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_long8 {
    pub s: [cl_long; 8usize],
    pub __bindgen_anon_1: cl_long8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long8__bindgen_ty_3,
    pub v2: [__cl_long2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long8__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long8__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_long8__bindgen_ty_3 {
    pub lo: cl_long4,
    pub hi: cl_long4,
}
#[test]
fn bindgen_test_layout_cl_long8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_long8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_long8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_long8() {
    assert_eq!(
        ::std::mem::size_of::<cl_long8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_long8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_long8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_long16 {
    pub s: [cl_long; 16usize],
    pub __bindgen_anon_1: cl_long16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_long16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_long16__bindgen_ty_3,
    pub v2: [__cl_long2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long16__bindgen_ty_1 {
    pub x: cl_long,
    pub y: cl_long,
    pub z: cl_long,
    pub w: cl_long,
    pub __spacer4: cl_long,
    pub __spacer5: cl_long,
    pub __spacer6: cl_long,
    pub __spacer7: cl_long,
    pub __spacer8: cl_long,
    pub __spacer9: cl_long,
    pub sa: cl_long,
    pub sb: cl_long,
    pub sc: cl_long,
    pub sd: cl_long,
    pub se: cl_long,
    pub sf: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_long16__bindgen_ty_2 {
    pub s0: cl_long,
    pub s1: cl_long,
    pub s2: cl_long,
    pub s3: cl_long,
    pub s4: cl_long,
    pub s5: cl_long,
    pub s6: cl_long,
    pub s7: cl_long,
    pub s8: cl_long,
    pub s9: cl_long,
    pub sA: cl_long,
    pub sB: cl_long,
    pub sC: cl_long,
    pub sD: cl_long,
    pub sE: cl_long,
    pub sF: cl_long,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct cl_long16__bindgen_ty_3 {
    pub lo: cl_long8,
    pub hi: cl_long8,
}
#[test]
fn bindgen_test_layout_cl_long16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_long16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16__bindgen_ty_3>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_long16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_long16() {
    assert_eq!(
        ::std::mem::size_of::<cl_long16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_long16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_long16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_long16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_long16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_long16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_ulong2 {
    pub s: [cl_ulong; 2usize],
    pub __bindgen_anon_1: cl_ulong2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong2__bindgen_ty_3,
    pub v2: __cl_ulong2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong2__bindgen_ty_3 {
    pub lo: cl_ulong,
    pub hi: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ulong2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_ulong2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_ulong4 {
    pub s: [cl_ulong; 4usize],
    pub __bindgen_anon_1: cl_ulong4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong4__bindgen_ty_3,
    pub v2: [__cl_ulong2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_ulong4__bindgen_ty_3 {
    pub lo: cl_ulong2,
    pub hi: cl_ulong2,
}
#[test]
fn bindgen_test_layout_cl_ulong4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_ulong4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ulong4() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_ulong4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
pub type cl_ulong3 = cl_ulong4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_ulong8 {
    pub s: [cl_ulong; 8usize],
    pub __bindgen_anon_1: cl_ulong8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong8__bindgen_ty_3,
    pub v2: [__cl_ulong2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_ulong8__bindgen_ty_3 {
    pub lo: cl_ulong4,
    pub hi: cl_ulong4,
}
#[test]
fn bindgen_test_layout_cl_ulong8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_ulong8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ulong8() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_ulong8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_ulong8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_ulong16 {
    pub s: [cl_ulong; 16usize],
    pub __bindgen_anon_1: cl_ulong16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_ulong16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_ulong16__bindgen_ty_3,
    pub v2: [__cl_ulong2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_1 {
    pub x: cl_ulong,
    pub y: cl_ulong,
    pub z: cl_ulong,
    pub w: cl_ulong,
    pub __spacer4: cl_ulong,
    pub __spacer5: cl_ulong,
    pub __spacer6: cl_ulong,
    pub __spacer7: cl_ulong,
    pub __spacer8: cl_ulong,
    pub __spacer9: cl_ulong,
    pub sa: cl_ulong,
    pub sb: cl_ulong,
    pub sc: cl_ulong,
    pub sd: cl_ulong,
    pub se: cl_ulong,
    pub sf: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_2 {
    pub s0: cl_ulong,
    pub s1: cl_ulong,
    pub s2: cl_ulong,
    pub s3: cl_ulong,
    pub s4: cl_ulong,
    pub s5: cl_ulong,
    pub s6: cl_ulong,
    pub s7: cl_ulong,
    pub s8: cl_ulong,
    pub s9: cl_ulong,
    pub sA: cl_ulong,
    pub sB: cl_ulong,
    pub sC: cl_ulong,
    pub sD: cl_ulong,
    pub sE: cl_ulong,
    pub sF: cl_ulong,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct cl_ulong16__bindgen_ty_3 {
    pub lo: cl_ulong8,
    pub hi: cl_ulong8,
}
#[test]
fn bindgen_test_layout_cl_ulong16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16__bindgen_ty_3>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_ulong16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_ulong16() {
    assert_eq!(
        ::std::mem::size_of::<cl_ulong16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_ulong16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_ulong16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_ulong16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_ulong16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_ulong16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cl_float2 {
    pub s: [cl_float; 2usize],
    pub __bindgen_anon_1: cl_float2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float2__bindgen_ty_3,
    pub v2: __cl_float2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float2__bindgen_ty_3 {
    pub lo: cl_float,
    pub hi: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_float2__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_float2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float2>(),
        8usize,
        concat!("Size of: ", stringify!(cl_float2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_float2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_float4 {
    pub s: [cl_float; 4usize],
    pub __bindgen_anon_1: cl_float4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float4__bindgen_ty_3,
    pub v2: [__cl_float2; 2usize],
    pub v4: __cl_float4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float4__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float4__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cl_float4__bindgen_ty_3 {
    pub lo: cl_float2,
    pub hi: cl_float2,
}
#[ignore]
#[test]
fn bindgen_test_layout_cl_float4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_float4__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_float4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_float4() {
    assert_eq!(
        ::std::mem::size_of::<cl_float4>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float4>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float4),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
pub type cl_float3 = cl_float4;
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_float8 {
    pub s: [cl_float; 8usize],
    pub __bindgen_anon_1: cl_float8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float8__bindgen_ty_3,
    pub v2: [__cl_float2; 4usize],
    pub v4: [__cl_float4; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float8__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float8__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_float8__bindgen_ty_3 {
    pub lo: cl_float4,
    pub hi: cl_float4,
}
#[test]
fn bindgen_test_layout_cl_float8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_float8__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_float8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_float8() {
    assert_eq!(
        ::std::mem::size_of::<cl_float8>(),
        32usize,
        concat!("Size of: ", stringify!(cl_float8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float8>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_float8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float8),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_float16 {
    pub s: [cl_float; 16usize],
    pub __bindgen_anon_1: cl_float16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_float16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_float16__bindgen_ty_3,
    pub v2: [__cl_float2; 8usize],
    pub v4: [__cl_float4; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float16__bindgen_ty_1 {
    pub x: cl_float,
    pub y: cl_float,
    pub z: cl_float,
    pub w: cl_float,
    pub __spacer4: cl_float,
    pub __spacer5: cl_float,
    pub __spacer6: cl_float,
    pub __spacer7: cl_float,
    pub __spacer8: cl_float,
    pub __spacer9: cl_float,
    pub sa: cl_float,
    pub sb: cl_float,
    pub sc: cl_float,
    pub sd: cl_float,
    pub se: cl_float,
    pub sf: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_float16__bindgen_ty_2 {
    pub s0: cl_float,
    pub s1: cl_float,
    pub s2: cl_float,
    pub s3: cl_float,
    pub s4: cl_float,
    pub s5: cl_float,
    pub s6: cl_float,
    pub s7: cl_float,
    pub s8: cl_float,
    pub s9: cl_float,
    pub sA: cl_float,
    pub sB: cl_float,
    pub sC: cl_float,
    pub sD: cl_float,
    pub sE: cl_float,
    pub sF: cl_float,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_float16__bindgen_ty_3 {
    pub lo: cl_float8,
    pub hi: cl_float8,
}
#[test]
fn bindgen_test_layout_cl_float16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_float16__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_float16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_float16() {
    assert_eq!(
        ::std::mem::size_of::<cl_float16>(),
        64usize,
        concat!("Size of: ", stringify!(cl_float16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_float16>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_float16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
    fn test_field_v4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_float16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v4) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_float16),
                "::",
                stringify!(v4)
            )
        );
    }
    test_field_v4();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union cl_double2 {
    pub s: [cl_double; 2usize],
    pub __bindgen_anon_1: cl_double2__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double2__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double2__bindgen_ty_3,
    pub v2: __cl_double2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double2__bindgen_ty_3 {
    pub lo: cl_double,
    pub hi: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_double2__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double2__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_double2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double2>(),
        16usize,
        concat!("Size of: ", stringify!(cl_double2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double2>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double2))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double2),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub union cl_double4 {
    pub s: [cl_double; 4usize],
    pub __bindgen_anon_1: cl_double4__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double4__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double4__bindgen_ty_3,
    pub v2: [__cl_double2; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double4__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double4__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct cl_double4__bindgen_ty_3 {
    pub lo: cl_double2,
    pub hi: cl_double2,
}
#[test]
fn bindgen_test_layout_cl_double4__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_double4__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4__bindgen_ty_3>(),
        16usize,
        concat!("Alignment of ", stringify!(cl_double4__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_double4() {
    assert_eq!(
        ::std::mem::size_of::<cl_double4>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double4))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double4>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_double4))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double4),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
pub type cl_double3 = cl_double4;
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub union cl_double8 {
    pub s: [cl_double; 8usize],
    pub __bindgen_anon_1: cl_double8__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double8__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double8__bindgen_ty_3,
    pub v2: [__cl_double2; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double8__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double8__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_2>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
}
#[repr(C)]
#[repr(align(32))]
#[derive(Copy, Clone)]
pub struct cl_double8__bindgen_ty_3 {
    pub lo: cl_double4,
    pub hi: cl_double4,
}
#[test]
fn bindgen_test_layout_cl_double8__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_double8__bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8__bindgen_ty_3>(),
        32usize,
        concat!("Alignment of ", stringify!(cl_double8__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_double8() {
    assert_eq!(
        ::std::mem::size_of::<cl_double8>(),
        64usize,
        concat!("Size of: ", stringify!(cl_double8))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double8>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_double8))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double8>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double8),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[repr(align(128))]
#[derive(Copy, Clone)]
pub union cl_double16 {
    pub s: [cl_double; 16usize],
    pub __bindgen_anon_1: cl_double16__bindgen_ty_1,
    pub __bindgen_anon_2: cl_double16__bindgen_ty_2,
    pub __bindgen_anon_3: cl_double16__bindgen_ty_3,
    pub v2: [__cl_double2; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double16__bindgen_ty_1 {
    pub x: cl_double,
    pub y: cl_double,
    pub z: cl_double,
    pub w: cl_double,
    pub __spacer4: cl_double,
    pub __spacer5: cl_double,
    pub __spacer6: cl_double,
    pub __spacer7: cl_double,
    pub __spacer8: cl_double,
    pub __spacer9: cl_double,
    pub sa: cl_double,
    pub sb: cl_double,
    pub sc: cl_double,
    pub sd: cl_double,
    pub se: cl_double,
    pub sf: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field___spacer4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer4)
            )
        );
    }
    test_field___spacer4();
    fn test_field___spacer5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer5)
            )
        );
    }
    test_field___spacer5();
    fn test_field___spacer6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer6)
            )
        );
    }
    test_field___spacer6();
    fn test_field___spacer7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer7)
            )
        );
    }
    test_field___spacer7();
    fn test_field___spacer8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer8)
            )
        );
    }
    test_field___spacer8();
    fn test_field___spacer9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spacer9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(__spacer9)
            )
        );
    }
    test_field___spacer9();
    fn test_field_sa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sa) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(sa)
            )
        );
    }
    test_field_sa();
    fn test_field_sb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sb) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(sb)
            )
        );
    }
    test_field_sb();
    fn test_field_sc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sc) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(sc)
            )
        );
    }
    test_field_sc();
    fn test_field_sd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sd) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(sd)
            )
        );
    }
    test_field_sd();
    fn test_field_se() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).se) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(se)
            )
        );
    }
    test_field_se();
    fn test_field_sf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sf) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_1),
                "::",
                stringify!(sf)
            )
        );
    }
    test_field_sf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cl_double16__bindgen_ty_2 {
    pub s0: cl_double,
    pub s1: cl_double,
    pub s2: cl_double,
    pub s3: cl_double,
    pub s4: cl_double,
    pub s5: cl_double,
    pub s6: cl_double,
    pub s7: cl_double,
    pub s8: cl_double,
    pub s9: cl_double,
    pub sA: cl_double,
    pub sB: cl_double,
    pub sC: cl_double,
    pub sD: cl_double,
    pub sE: cl_double,
    pub sF: cl_double,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_2>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_2))
    );
    fn test_field_s0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s0)
            )
        );
    }
    test_field_s0();
    fn test_field_s1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s1)
            )
        );
    }
    test_field_s1();
    fn test_field_s2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s2)
            )
        );
    }
    test_field_s2();
    fn test_field_s3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s3)
            )
        );
    }
    test_field_s3();
    fn test_field_s4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s4)
            )
        );
    }
    test_field_s4();
    fn test_field_s5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s5)
            )
        );
    }
    test_field_s5();
    fn test_field_s6() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s6) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s6)
            )
        );
    }
    test_field_s6();
    fn test_field_s7() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s7) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s7)
            )
        );
    }
    test_field_s7();
    fn test_field_s8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s8) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s8)
            )
        );
    }
    test_field_s8();
    fn test_field_s9() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s9) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(s9)
            )
        );
    }
    test_field_s9();
    fn test_field_sA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sA) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sA)
            )
        );
    }
    test_field_sA();
    fn test_field_sB() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sB) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sB)
            )
        );
    }
    test_field_sB();
    fn test_field_sC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sC) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sC)
            )
        );
    }
    test_field_sC();
    fn test_field_sD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sD) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sD)
            )
        );
    }
    test_field_sD();
    fn test_field_sE() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sE) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sE)
            )
        );
    }
    test_field_sE();
    fn test_field_sF() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sF) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_2),
                "::",
                stringify!(sF)
            )
        );
    }
    test_field_sF();
}
#[repr(C)]
#[repr(align(64))]
#[derive(Copy, Clone)]
pub struct cl_double16__bindgen_ty_3 {
    pub lo: cl_double8,
    pub hi: cl_double8,
}
#[test]
fn bindgen_test_layout_cl_double16__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<cl_double16__bindgen_ty_3>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16__bindgen_ty_3>(),
        64usize,
        concat!("Alignment of ", stringify!(cl_double16__bindgen_ty_3))
    );
    fn test_field_lo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_3),
                "::",
                stringify!(lo)
            )
        );
    }
    test_field_lo();
    fn test_field_hi() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hi) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16__bindgen_ty_3),
                "::",
                stringify!(hi)
            )
        );
    }
    test_field_hi();
}
#[test]
fn bindgen_test_layout_cl_double16() {
    assert_eq!(
        ::std::mem::size_of::<cl_double16>(),
        128usize,
        concat!("Size of: ", stringify!(cl_double16))
    );
    assert_eq!(
        ::std::mem::align_of::<cl_double16>(),
        128usize,
        concat!("Alignment of ", stringify!(cl_double16))
    );
    fn test_field_s() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16),
                "::",
                stringify!(s)
            )
        );
    }
    test_field_s();
    fn test_field_v2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<cl_double16>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(cl_double16),
                "::",
                stringify!(v2)
            )
        );
    }
    test_field_v2();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_platform_id {
    _unused: [u8; 0],
}
pub type cl_platform_id = *mut _cl_platform_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_device_id {
    _unused: [u8; 0],
}
pub type cl_device_id = *mut _cl_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_context {
    _unused: [u8; 0],
}
pub type cl_context = *mut _cl_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_command_queue {
    _unused: [u8; 0],
}
pub type cl_command_queue = *mut _cl_command_queue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_mem {
    _unused: [u8; 0],
}
pub type cl_mem = *mut _cl_mem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_program {
    _unused: [u8; 0],
}
pub type cl_program = *mut _cl_program;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_kernel {
    _unused: [u8; 0],
}
pub type cl_kernel = *mut _cl_kernel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_event {
    _unused: [u8; 0],
}
pub type cl_event = *mut _cl_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_sampler {
    _unused: [u8; 0],
}
pub type cl_sampler = *mut _cl_sampler;
pub type cl_bool = cl_uint;
pub type cl_bitfield = cl_ulong;
pub type cl_properties = cl_ulong;
pub type cl_device_type = cl_bitfield;
pub type cl_platform_info = cl_uint;
pub type cl_device_info = cl_uint;
pub type cl_device_fp_config = cl_bitfield;
pub type cl_device_mem_cache_type = cl_uint;
pub type cl_device_local_mem_type = cl_uint;
pub type cl_device_exec_capabilities = cl_bitfield;
pub type cl_device_svm_capabilities = cl_bitfield;
pub type cl_command_queue_properties = cl_bitfield;
pub type cl_device_partition_property = isize;
pub type cl_device_affinity_domain = cl_bitfield;
pub type cl_context_properties = isize;
pub type cl_context_info = cl_uint;
pub type cl_queue_properties = cl_properties;
pub type cl_command_queue_info = cl_uint;
pub type cl_channel_order = cl_uint;
pub type cl_channel_type = cl_uint;
pub type cl_mem_flags = cl_bitfield;
pub type cl_svm_mem_flags = cl_bitfield;
pub type cl_mem_object_type = cl_uint;
pub type cl_mem_info = cl_uint;
pub type cl_mem_migration_flags = cl_bitfield;
pub type cl_image_info = cl_uint;
pub type cl_buffer_create_type = cl_uint;
pub type cl_addressing_mode = cl_uint;
pub type cl_filter_mode = cl_uint;
pub type cl_sampler_info = cl_uint;
pub type cl_map_flags = cl_bitfield;
pub type cl_pipe_properties = isize;
pub type cl_pipe_info = cl_uint;
pub type cl_program_info = cl_uint;
pub type cl_program_build_info = cl_uint;
pub type cl_program_binary_type = cl_uint;
pub type cl_build_status = cl_int;
pub type cl_kernel_info = cl_uint;
pub type cl_kernel_arg_info = cl_uint;
pub type cl_kernel_arg_address_qualifier = cl_uint;
pub type cl_kernel_arg_access_qualifier = cl_uint;
pub type cl_kernel_arg_type_qualifier = cl_bitfield;
pub type cl_kernel_work_group_info = cl_uint;
pub type cl_kernel_sub_group_info = cl_uint;
pub type cl_event_info = cl_uint;
pub type cl_command_type = cl_uint;
pub type cl_profiling_info = cl_uint;
pub type cl_sampler_properties = cl_properties;
pub type cl_kernel_exec_info = cl_uint;
pub type cl_device_atomic_capabilities = cl_bitfield;
pub type cl_device_device_enqueue_capabilities = cl_bitfield;
pub type cl_khronos_vendor_id = cl_uint;
pub type cl_mem_properties = cl_properties;
pub type cl_version = cl_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_image_format {
    pub image_channel_order: cl_channel_order,
    pub image_channel_data_type: cl_channel_type,
}
#[test]
fn bindgen_test_layout__cl_image_format() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_format>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_format))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_format>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_image_format))
    );
    fn test_field_image_channel_order() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_format>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_channel_order) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_format),
                "::",
                stringify!(image_channel_order)
            )
        );
    }
    test_field_image_channel_order();
    fn test_field_image_channel_data_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_format>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_channel_data_type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_format),
                "::",
                stringify!(image_channel_data_type)
            )
        );
    }
    test_field_image_channel_data_type();
}
pub type cl_image_format = _cl_image_format;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _cl_image_desc {
    pub image_type: cl_mem_object_type,
    pub image_width: size_t,
    pub image_height: size_t,
    pub image_depth: size_t,
    pub image_array_size: size_t,
    pub image_row_pitch: size_t,
    pub image_slice_pitch: size_t,
    pub num_mip_levels: cl_uint,
    pub num_samples: cl_uint,
    pub __bindgen_anon_1: _cl_image_desc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _cl_image_desc__bindgen_ty_1 {
    pub buffer: cl_mem,
    pub mem_object: cl_mem,
}
#[test]
fn bindgen_test_layout__cl_image_desc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc__bindgen_ty_1))
    );
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc__bindgen_ty_1),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_mem_object() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mem_object) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc__bindgen_ty_1),
                "::",
                stringify!(mem_object)
            )
        );
    }
    test_field_mem_object();
}
#[test]
fn bindgen_test_layout__cl_image_desc() {
    assert_eq!(
        ::std::mem::size_of::<_cl_image_desc>(),
        72usize,
        concat!("Size of: ", stringify!(_cl_image_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_image_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_image_desc))
    );
    fn test_field_image_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_type)
            )
        );
    }
    test_field_image_type();
    fn test_field_image_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_width) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_width)
            )
        );
    }
    test_field_image_width();
    fn test_field_image_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_height) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_height)
            )
        );
    }
    test_field_image_height();
    fn test_field_image_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_depth) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_depth)
            )
        );
    }
    test_field_image_depth();
    fn test_field_image_array_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_array_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_array_size)
            )
        );
    }
    test_field_image_array_size();
    fn test_field_image_row_pitch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_row_pitch) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_row_pitch)
            )
        );
    }
    test_field_image_row_pitch();
    fn test_field_image_slice_pitch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).image_slice_pitch) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(image_slice_pitch)
            )
        );
    }
    test_field_image_slice_pitch();
    fn test_field_num_mip_levels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_mip_levels) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(num_mip_levels)
            )
        );
    }
    test_field_num_mip_levels();
    fn test_field_num_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_image_desc>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_samples) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_image_desc),
                "::",
                stringify!(num_samples)
            )
        );
    }
    test_field_num_samples();
}
pub type cl_image_desc = _cl_image_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_buffer_region {
    pub origin: size_t,
    pub size: size_t,
}
#[test]
fn bindgen_test_layout__cl_buffer_region() {
    assert_eq!(
        ::std::mem::size_of::<_cl_buffer_region>(),
        16usize,
        concat!("Size of: ", stringify!(_cl_buffer_region))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_buffer_region>(),
        8usize,
        concat!("Alignment of ", stringify!(_cl_buffer_region))
    );
    fn test_field_origin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_buffer_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).origin) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_buffer_region),
                "::",
                stringify!(origin)
            )
        );
    }
    test_field_origin();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_buffer_region>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_buffer_region),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
}
pub type cl_buffer_region = _cl_buffer_region;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cl_name_version {
    pub version: cl_version,
    pub name: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout__cl_name_version() {
    assert_eq!(
        ::std::mem::size_of::<_cl_name_version>(),
        68usize,
        concat!("Size of: ", stringify!(_cl_name_version))
    );
    assert_eq!(
        ::std::mem::align_of::<_cl_name_version>(),
        4usize,
        concat!("Alignment of ", stringify!(_cl_name_version))
    );
    fn test_field_version() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_name_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_name_version),
                "::",
                stringify!(version)
            )
        );
    }
    test_field_version();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_cl_name_version>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_cl_name_version),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
pub type cl_name_version = _cl_name_version;
extern "C" {
    pub fn clGetPlatformIDs(
        num_entries: cl_uint,
        platforms: *mut cl_platform_id,
        num_platforms: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetPlatformInfo(
        platform: cl_platform_id,
        param_name: cl_platform_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceIDs(
        platform: cl_platform_id,
        device_type: cl_device_type,
        num_entries: cl_uint,
        devices: *mut cl_device_id,
        num_devices: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceInfo(
        device: cl_device_id,
        param_name: cl_device_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateSubDevices(
        in_device: cl_device_id,
        properties: *const cl_device_partition_property,
        num_devices: cl_uint,
        out_devices: *mut cl_device_id,
        num_devices_ret: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clRetainDevice(device: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clReleaseDevice(device: cl_device_id) -> cl_int;
}
extern "C" {
    pub fn clSetDefaultDeviceCommandQueue(
        context: cl_context,
        device: cl_device_id,
        command_queue: cl_command_queue,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetDeviceAndHostTimer(
        device: cl_device_id,
        device_timestamp: *mut cl_ulong,
        host_timestamp: *mut cl_ulong,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetHostTimer(device: cl_device_id, host_timestamp: *mut cl_ulong) -> cl_int;
}
extern "C" {
    pub fn clCreateContext(
        properties: *const cl_context_properties,
        num_devices: cl_uint,
        devices: *const cl_device_id,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(
                errinfo: *const ::std::os::raw::c_char,
                private_info: *const ::std::os::raw::c_void,
                cb: size_t,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_context;
}
extern "C" {
    pub fn clCreateContextFromType(
        properties: *const cl_context_properties,
        device_type: cl_device_type,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(
                errinfo: *const ::std::os::raw::c_char,
                private_info: *const ::std::os::raw::c_void,
                cb: size_t,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_context;
}
extern "C" {
    pub fn clRetainContext(context: cl_context) -> cl_int;
}
extern "C" {
    pub fn clReleaseContext(context: cl_context) -> cl_int;
}
extern "C" {
    pub fn clGetContextInfo(
        context: cl_context,
        param_name: cl_context_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetContextDestructorCallback(
        context: cl_context,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(context: cl_context, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateCommandQueueWithProperties(
        context: cl_context,
        device: cl_device_id,
        properties: *const cl_queue_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_command_queue;
}
extern "C" {
    pub fn clRetainCommandQueue(command_queue: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clReleaseCommandQueue(command_queue: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clGetCommandQueueInfo(
        command_queue: cl_command_queue,
        param_name: cl_command_queue_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateBuffer(
        context: cl_context,
        flags: cl_mem_flags,
        size: size_t,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateSubBuffer(
        buffer: cl_mem,
        flags: cl_mem_flags,
        buffer_create_type: cl_buffer_create_type,
        buffer_create_info: *const ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_desc: *const cl_image_desc,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreatePipe(
        context: cl_context,
        flags: cl_mem_flags,
        pipe_packet_size: cl_uint,
        pipe_max_packets: cl_uint,
        properties: *const cl_pipe_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateBufferWithProperties(
        context: cl_context,
        properties: *const cl_mem_properties,
        flags: cl_mem_flags,
        size: size_t,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateImageWithProperties(
        context: cl_context,
        properties: *const cl_mem_properties,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_desc: *const cl_image_desc,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clRetainMemObject(memobj: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clReleaseMemObject(memobj: cl_mem) -> cl_int;
}
extern "C" {
    pub fn clGetSupportedImageFormats(
        context: cl_context,
        flags: cl_mem_flags,
        image_type: cl_mem_object_type,
        num_entries: cl_uint,
        image_formats: *mut cl_image_format,
        num_image_formats: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetMemObjectInfo(
        memobj: cl_mem,
        param_name: cl_mem_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetImageInfo(
        image: cl_mem,
        param_name: cl_image_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetPipeInfo(
        pipe: cl_mem,
        param_name: cl_pipe_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetMemObjectDestructorCallback(
        memobj: cl_mem,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(memobj: cl_mem, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSVMAlloc(
        context: cl_context,
        flags: cl_svm_mem_flags,
        size: size_t,
        alignment: cl_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clSVMFree(context: cl_context, svm_pointer: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn clCreateSamplerWithProperties(
        context: cl_context,
        sampler_properties: *const cl_sampler_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_sampler;
}
extern "C" {
    pub fn clRetainSampler(sampler: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clReleaseSampler(sampler: cl_sampler) -> cl_int;
}
extern "C" {
    pub fn clGetSamplerInfo(
        sampler: cl_sampler,
        param_name: cl_sampler_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateProgramWithSource(
        context: cl_context,
        count: cl_uint,
        strings: *mut *const ::std::os::raw::c_char,
        lengths: *const size_t,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBinary(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        lengths: *const size_t,
        binaries: *mut *const ::std::os::raw::c_uchar,
        binary_status: *mut cl_int,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithBuiltInKernels(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        kernel_names: *const ::std::os::raw::c_char,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clCreateProgramWithIL(
        context: cl_context,
        il: *const ::std::os::raw::c_void,
        length: size_t,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clRetainProgram(program: cl_program) -> cl_int;
}
extern "C" {
    pub fn clReleaseProgram(program: cl_program) -> cl_int;
}
extern "C" {
    pub fn clBuildProgram(
        program: cl_program,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clCompileProgram(
        program: cl_program,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        num_input_headers: cl_uint,
        input_headers: *const cl_program,
        header_include_names: *mut *const ::std::os::raw::c_char,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clLinkProgram(
        context: cl_context,
        num_devices: cl_uint,
        device_list: *const cl_device_id,
        options: *const ::std::os::raw::c_char,
        num_input_programs: cl_uint,
        input_programs: *const cl_program,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_program;
}
extern "C" {
    pub fn clSetProgramReleaseCallback(
        program: cl_program,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(program: cl_program, user_data: *mut ::std::os::raw::c_void),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetProgramSpecializationConstant(
        program: cl_program,
        spec_id: cl_uint,
        spec_size: size_t,
        spec_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clUnloadPlatformCompiler(platform: cl_platform_id) -> cl_int;
}
extern "C" {
    pub fn clGetProgramInfo(
        program: cl_program,
        param_name: cl_program_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetProgramBuildInfo(
        program: cl_program,
        device: cl_device_id,
        param_name: cl_program_build_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateKernel(
        program: cl_program,
        kernel_name: *const ::std::os::raw::c_char,
        errcode_ret: *mut cl_int,
    ) -> cl_kernel;
}
extern "C" {
    pub fn clCreateKernelsInProgram(
        program: cl_program,
        num_kernels: cl_uint,
        kernels: *mut cl_kernel,
        num_kernels_ret: *mut cl_uint,
    ) -> cl_int;
}
extern "C" {
    pub fn clCloneKernel(source_kernel: cl_kernel, errcode_ret: *mut cl_int) -> cl_kernel;
}
extern "C" {
    pub fn clRetainKernel(kernel: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clReleaseKernel(kernel: cl_kernel) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArg(
        kernel: cl_kernel,
        arg_index: cl_uint,
        arg_size: size_t,
        arg_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelArgSVMPointer(
        kernel: cl_kernel,
        arg_index: cl_uint,
        arg_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clSetKernelExecInfo(
        kernel: cl_kernel,
        param_name: cl_kernel_exec_info,
        param_value_size: size_t,
        param_value: *const ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelInfo(
        kernel: cl_kernel,
        param_name: cl_kernel_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelArgInfo(
        kernel: cl_kernel,
        arg_indx: cl_uint,
        param_name: cl_kernel_arg_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelWorkGroupInfo(
        kernel: cl_kernel,
        device: cl_device_id,
        param_name: cl_kernel_work_group_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetKernelSubGroupInfo(
        kernel: cl_kernel,
        device: cl_device_id,
        param_name: cl_kernel_sub_group_info,
        input_value_size: size_t,
        input_value: *const ::std::os::raw::c_void,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clWaitForEvents(num_events: cl_uint, event_list: *const cl_event) -> cl_int;
}
extern "C" {
    pub fn clGetEventInfo(
        event: cl_event,
        param_name: cl_event_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clCreateUserEvent(context: cl_context, errcode_ret: *mut cl_int) -> cl_event;
}
extern "C" {
    pub fn clRetainEvent(event: cl_event) -> cl_int;
}
extern "C" {
    pub fn clReleaseEvent(event: cl_event) -> cl_int;
}
extern "C" {
    pub fn clSetUserEventStatus(event: cl_event, execution_status: cl_int) -> cl_int;
}
extern "C" {
    pub fn clSetEventCallback(
        event: cl_event,
        command_exec_callback_type: cl_int,
        pfn_notify: ::std::option::Option<
            unsafe extern "C" fn(
                event: cl_event,
                event_command_status: cl_int,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetEventProfilingInfo(
        event: cl_event,
        param_name: cl_profiling_info,
        param_value_size: size_t,
        param_value: *mut ::std::os::raw::c_void,
        param_value_size_ret: *mut size_t,
    ) -> cl_int;
}
extern "C" {
    pub fn clFlush(command_queue: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clFinish(command_queue: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_read: cl_bool,
        offset: size_t,
        size: size_t,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadBufferRect(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_read: cl_bool,
        buffer_origin: *const size_t,
        host_origin: *const size_t,
        region: *const size_t,
        buffer_row_pitch: size_t,
        buffer_slice_pitch: size_t,
        host_row_pitch: size_t,
        host_slice_pitch: size_t,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_write: cl_bool,
        offset: size_t,
        size: size_t,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteBufferRect(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_write: cl_bool,
        buffer_origin: *const size_t,
        host_origin: *const size_t,
        region: *const size_t,
        buffer_row_pitch: size_t,
        buffer_slice_pitch: size_t,
        host_row_pitch: size_t,
        host_slice_pitch: size_t,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        pattern: *const ::std::os::raw::c_void,
        pattern_size: size_t,
        offset: size_t,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBuffer(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_buffer: cl_mem,
        src_offset: size_t,
        dst_offset: size_t,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferRect(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_buffer: cl_mem,
        src_origin: *const size_t,
        dst_origin: *const size_t,
        region: *const size_t,
        src_row_pitch: size_t,
        src_slice_pitch: size_t,
        dst_row_pitch: size_t,
        dst_slice_pitch: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueReadImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_read: cl_bool,
        origin: *const size_t,
        region: *const size_t,
        row_pitch: size_t,
        slice_pitch: size_t,
        ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWriteImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_write: cl_bool,
        origin: *const size_t,
        region: *const size_t,
        input_row_pitch: size_t,
        input_slice_pitch: size_t,
        ptr: *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueFillImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        fill_color: *const ::std::os::raw::c_void,
        origin: *const size_t,
        region: *const size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImage(
        command_queue: cl_command_queue,
        src_image: cl_mem,
        dst_image: cl_mem,
        src_origin: *const size_t,
        dst_origin: *const size_t,
        region: *const size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyImageToBuffer(
        command_queue: cl_command_queue,
        src_image: cl_mem,
        dst_buffer: cl_mem,
        src_origin: *const size_t,
        region: *const size_t,
        dst_offset: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueCopyBufferToImage(
        command_queue: cl_command_queue,
        src_buffer: cl_mem,
        dst_image: cl_mem,
        src_offset: size_t,
        dst_origin: *const size_t,
        region: *const size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMapBuffer(
        command_queue: cl_command_queue,
        buffer: cl_mem,
        blocking_map: cl_bool,
        map_flags: cl_map_flags,
        offset: size_t,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
        errcode_ret: *mut cl_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clEnqueueMapImage(
        command_queue: cl_command_queue,
        image: cl_mem,
        blocking_map: cl_bool,
        map_flags: cl_map_flags,
        origin: *const size_t,
        region: *const size_t,
        image_row_pitch: *mut size_t,
        image_slice_pitch: *mut size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
        errcode_ret: *mut cl_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clEnqueueUnmapMemObject(
        command_queue: cl_command_queue,
        memobj: cl_mem,
        mapped_ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMigrateMemObjects(
        command_queue: cl_command_queue,
        num_mem_objects: cl_uint,
        mem_objects: *const cl_mem,
        flags: cl_mem_migration_flags,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNDRangeKernel(
        command_queue: cl_command_queue,
        kernel: cl_kernel,
        work_dim: cl_uint,
        global_work_offset: *const size_t,
        global_work_size: *const size_t,
        local_work_size: *const size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueNativeKernel(
        command_queue: cl_command_queue,
        user_func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        args: *mut ::std::os::raw::c_void,
        cb_args: size_t,
        num_mem_objects: cl_uint,
        mem_list: *const cl_mem,
        args_mem_loc: *mut *const ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueMarkerWithWaitList(
        command_queue: cl_command_queue,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrierWithWaitList(
        command_queue: cl_command_queue,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMFree(
        command_queue: cl_command_queue,
        num_svm_pointers: cl_uint,
        svm_pointers: *mut *mut ::std::os::raw::c_void,
        pfn_free_func: ::std::option::Option<
            unsafe extern "C" fn(
                queue: cl_command_queue,
                num_svm_pointers: cl_uint,
                svm_pointers: *mut *mut ::std::os::raw::c_void,
                user_data: *mut ::std::os::raw::c_void,
            ),
        >,
        user_data: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemcpy(
        command_queue: cl_command_queue,
        blocking_copy: cl_bool,
        dst_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *const ::std::os::raw::c_void,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMemFill(
        command_queue: cl_command_queue,
        svm_ptr: *mut ::std::os::raw::c_void,
        pattern: *const ::std::os::raw::c_void,
        pattern_size: size_t,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMap(
        command_queue: cl_command_queue,
        blocking_map: cl_bool,
        flags: cl_map_flags,
        svm_ptr: *mut ::std::os::raw::c_void,
        size: size_t,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMUnmap(
        command_queue: cl_command_queue,
        svm_ptr: *mut ::std::os::raw::c_void,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueSVMMigrateMem(
        command_queue: cl_command_queue,
        num_svm_pointers: cl_uint,
        svm_pointers: *mut *const ::std::os::raw::c_void,
        sizes: *const size_t,
        flags: cl_mem_migration_flags,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddressForPlatform(
        platform: cl_platform_id,
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clCreateImage2D(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_width: size_t,
        image_height: size_t,
        image_row_pitch: size_t,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clCreateImage3D(
        context: cl_context,
        flags: cl_mem_flags,
        image_format: *const cl_image_format,
        image_width: size_t,
        image_height: size_t,
        image_depth: size_t,
        image_row_pitch: size_t,
        image_slice_pitch: size_t,
        host_ptr: *mut ::std::os::raw::c_void,
        errcode_ret: *mut cl_int,
    ) -> cl_mem;
}
extern "C" {
    pub fn clEnqueueMarker(command_queue: cl_command_queue, event: *mut cl_event) -> cl_int;
}
extern "C" {
    pub fn clEnqueueWaitForEvents(
        command_queue: cl_command_queue,
        num_events: cl_uint,
        event_list: *const cl_event,
    ) -> cl_int;
}
extern "C" {
    pub fn clEnqueueBarrier(command_queue: cl_command_queue) -> cl_int;
}
extern "C" {
    pub fn clUnloadCompiler() -> cl_int;
}
extern "C" {
    pub fn clGetExtensionFunctionAddress(
        func_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn clCreateCommandQueue(
        context: cl_context,
        device: cl_device_id,
        properties: cl_command_queue_properties,
        errcode_ret: *mut cl_int,
    ) -> cl_command_queue;
}
extern "C" {
    pub fn clCreateSampler(
        context: cl_context,
        normalized_coords: cl_bool,
        addressing_mode: cl_addressing_mode,
        filter_mode: cl_filter_mode,
        errcode_ret: *mut cl_int,
    ) -> cl_sampler;
}
extern "C" {
    pub fn clEnqueueTask(
        command_queue: cl_command_queue,
        kernel: cl_kernel,
        num_events_in_wait_list: cl_uint,
        event_wait_list: *const cl_event,
        event: *mut cl_event,
    ) -> cl_int;
}
