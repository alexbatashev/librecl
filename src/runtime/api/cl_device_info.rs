#[derive(Debug, Clone)]
#[repr(u32)]
pub enum DeviceInfoNames {
    Type = 0x1000,
    VendorId = 0x1001,
    MaxComputeUnits = 0x1002,
    MaxWorkItemDimensions = 0x1003,
    MaxWorkGroupSize = 0x1004,
    MaxWorkItemSizes = 0x1005,
    PreferredVectorWidthChar = 0x1006,
    PreferredVectorWidthShort = 0x1007,
    PreferredVectorWidthInt = 0x1008,
    PreferredVectorWidthLong = 0x1009,
    PreferredVectorWidthFloat = 0x100A,
    PreferredVectorWidthDouble = 0x100B,
    MaxClockFrequency = 0x100C,
    AddressBits = 0x100D,
    MaxReadImageArgs = 0x100E,
    MaxWriteImageArgs = 0x100F,
    MaxMemAllocSize = 0x1010,
    Image2DMaxWidth = 0x1011,
    Image2DMaxHeight = 0x1012,
    Image3DMaxWidth = 0x1013,
    Image3DMaxHeight = 0x1014,
    Image3DMaxDepth = 0x1015,
    ImageSupport = 0x1016,
    MaxParameterSize = 0x1017,
    MaxSamplers = 0x1018,
    MemBaseAddrAlign = 0x1019,
    MinDataTypeAlignSize = 0x101A,
    SingleFpConfig = 0x101B,
    GlobalMemCacheType = 0x101C,
    GlobalMemCachelineSize = 0x101D,
    GlobalMemCacheSize = 0x101E,
    GlobalMemSize = 0x101F,
    MaxConstantBufferSize = 0x1020,
    MaxConstantArgs = 0x1021,
    LocalMemType = 0x1022,
    LocalMemSize = 0x1023,
    ErrorCorrectionSupport = 0x1024,
    ProfilingTimerResolution = 0x1025,
    EndianLittle = 0x1026,
    Available = 0x1027,
    CompilerAvailable = 0x1028,
    ExecutionCapabilities = 0x1029,
    QueueOnHostProperties = 0x102A,
    Name = 0x102B,
    Vendor = 0x102C,
    ClDriverVersion = 0x102D,
    Profile = 0x102E,
    Version = 0x102F,
    Extensions = 0x1030,
    Platform = 0x1031,
    DoubleFpConfig = 0x1032,
    PreferredVectorWidthHalf = 0x1034,
    HostUnifiedMemory = 0x1035,
    NativeVectorWidthChar = 0x1036,
    NativeVectorWidthShort = 0x1037,
    NativeVectorWidthInt = 0x1038,
    NativeVectorWidthLong = 0x1039,
    NativeVectorWidthFloat = 0x103A,
    NativeVectorWidthDouble = 0x103B,
    NativeVectorWidthHalf = 0x103C,
    OpenclCVersion = 0x103D,
    LinkerAvailable = 0x103E,
    BuiltInKernels = 0x103F,
    ImageMaxBufferSize = 0x1040,
    ImageMaxArraySize = 0x1041,
    ParentDevice = 0x1042,
    PartitionMaxSubDevices = 0x1043,
    PartitionProperties = 0x1044,
    PartitionAffinityDomain = 0x1045,
    PartitionType = 0x1046,
    ReferenceCount = 0x1047,
    PreferredInteropUserSync = 0x1048,
    PrintfBufferSize = 0x1049,
    ImagePitchAlignment = 0x104A,
    ImageBaseAddressAlignment = 0x104B,
    MaxReadWriteImageArgs = 0x104C,
    MaxGlobalVariableSize = 0x104D,
    QueueOnDeviceProperties = 0x104E,
    QueueOnDevicePreferredSize = 0x104F,
    QueueOnDeviceMaxSize = 0x1050,
    MaxOnDeviceQueues = 0x1051,
    MaxOnDeviceEvents = 0x1052,
    SvmCapabilities = 0x1053,
    GlobalVariablePreferredTotalSize = 0x1054,
    MaxPipeArgs = 0x1055,
    PipeMaxActiveReservations = 0x1056,
    PipeMaxPacketSize = 0x1057,
    PreferredPlatformAtomicAlignment = 0x1058,
    PreferredGlobalAtomicAlignment = 0x1059,
    PreferredLocalAtomicAlignment = 0x105A,
    IlVersion = 0x105B,
    MaxNumSubGroups = 0x105C,
    SubGroupIndependentForwardProgress = 0x105D,
    NumericVersion = 0x105E,
    ExtensionsWithVersion = 0x1060,
    IlsWithVersion = 0x1061,
    BuiltInKernelsWithVersion = 0x1062,
    AtomicMemoryCapabilities = 0x1063,
    AtomicFenceCapabilities = 0x1064,
    NonUniformWorkGroupSupport = 0x1065,
    OpenclCAllVersions = 0x1066,
    PreferredWorkGroupSizeMultiple = 0x1067,
    WorkGroupCollectiveFunctionsSupport = 0x1068,
    GenericAddressSpaceSupport = 0x1069,
    OpenclCFeatures = 0x106F,
    DeviceEnqueueCapabilities = 0x1070,
    PipeSupport = 0x1071,
    LatestConformanceVersionPassed = 0x1072,
}

impl DeviceInfoNames {
    pub fn as_cl_str(&self) -> &str {
        match self {
            DeviceInfoNames::Type => "CL_DEVICE_TYPE",
            DeviceInfoNames::VendorId => "CL_DEVICE_VENDOR_ID",
            DeviceInfoNames::MaxComputeUnits => "CL_DEVICE_MAX_COMPUTE_UNITS",
            DeviceInfoNames::MaxWorkItemDimensions => "CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS",
            DeviceInfoNames::MaxWorkGroupSize => "CL_DEVICE_MAX_WORK_GROUP_SIZE",
            DeviceInfoNames::MaxWorkItemSizes => "CL_DEVICE_MAX_WORK_ITEM_SIZES",
            DeviceInfoNames::PreferredVectorWidthChar => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR",
            DeviceInfoNames::PreferredVectorWidthShort => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT",
            DeviceInfoNames::PreferredVectorWidthInt => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT",
            DeviceInfoNames::PreferredVectorWidthLong => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG",
            DeviceInfoNames::PreferredVectorWidthFloat => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT",
            DeviceInfoNames::PreferredVectorWidthDouble => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE",
            DeviceInfoNames::MaxClockFrequency => "CL_DEVICE_MAX_CLOCK_FREQUENCY",
            DeviceInfoNames::AddressBits => "CL_DEVICE_ADDRESS_BITS",
            DeviceInfoNames::MaxReadImageArgs => "CL_DEVICE_MAX_READ_IMAGE_ARGS",
            DeviceInfoNames::MaxWriteImageArgs => "CL_DEVICE_MAX_WRITE_IMAGE_ARGS",
            DeviceInfoNames::MaxMemAllocSize => "CL_DEVICE_MAX_MEM_ALLOC_SIZE",
            DeviceInfoNames::Image2DMaxWidth => "CL_DEVICE_IMAGE2D_MAX_WIDTH",
            DeviceInfoNames::Image2DMaxHeight => "CL_DEVICE_IMAGE2D_MAX_HEIGHT",
            DeviceInfoNames::Image3DMaxWidth => "CL_DEVICE_IMAGE3D_MAX_WIDTH",
            DeviceInfoNames::Image3DMaxHeight => "CL_DEVICE_IMAGE3D_MAX_HEIGHT",
            DeviceInfoNames::Image3DMaxDepth => "CL_DEVICE_IMAGE3D_MAX_DEPTH",
            DeviceInfoNames::ImageSupport => "CL_DEVICE_IMAGE_SUPPORT",
            DeviceInfoNames::MaxParameterSize => "CL_DEVICE_MAX_PARAMETER_SIZE",
            DeviceInfoNames::MaxSamplers => "CL_DEVICE_MAX_SAMPLERS",
            DeviceInfoNames::MemBaseAddrAlign => "CL_DEVICE_MEM_BASE_ADDR_ALIGN",
            DeviceInfoNames::MinDataTypeAlignSize => "CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE",
            DeviceInfoNames::SingleFpConfig => "CL_DEVICE_SINGLE_FP_CONFIG",
            DeviceInfoNames::GlobalMemCacheType => "CL_DEVICE_GLOBAL_MEM_CACHE_TYPE",
            DeviceInfoNames::GlobalMemCachelineSize => "CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE",
            DeviceInfoNames::GlobalMemCacheSize => "CL_DEVICE_GLOBAL_MEM_CACHE_SIZE",
            DeviceInfoNames::GlobalMemSize => "CL_DEVICE_GLOBAL_MEM_SIZE",
            DeviceInfoNames::MaxConstantBufferSize => "CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE",
            DeviceInfoNames::MaxConstantArgs => "CL_DEVICE_MAX_CONSTANT_ARGS",
            DeviceInfoNames::LocalMemType => "CL_DEVICE_LOCAL_MEM_TYPE",
            DeviceInfoNames::LocalMemSize => "CL_DEVICE_LOCAL_MEM_SIZE",
            DeviceInfoNames::ErrorCorrectionSupport => "CL_DEVICE_ERROR_CORRECTION_SUPPORT",
            DeviceInfoNames::ProfilingTimerResolution => "CL_DEVICE_PROFILING_TIMER_RESOLUTION",
            DeviceInfoNames::EndianLittle => "CL_DEVICE_ENDIAN_LITTLE",
            DeviceInfoNames::Available => "CL_DEVICE_AVAILABLE",
            DeviceInfoNames::CompilerAvailable => "CL_DEVICE_COMPILER_AVAILABLE",
            DeviceInfoNames::ExecutionCapabilities => "CL_DEVICE_EXECUTION_CAPABILITIES",
            DeviceInfoNames::QueueOnHostProperties => "CL_DEVICE_QUEUE_ON_HOST_PROPERTIES",
            DeviceInfoNames::Name => "CL_DEVICE_NAME",
            DeviceInfoNames::Vendor => "CL_DEVICE_VENDOR",
            DeviceInfoNames::ClDriverVersion => "CL_DRIVER_VERSION",
            DeviceInfoNames::Profile => "CL_DEVICE_PROFILE",
            DeviceInfoNames::Version => "CL_DEVICE_VERSION",
            DeviceInfoNames::Extensions => "CL_DEVICE_EXTENSIONS",
            DeviceInfoNames::Platform => "CL_DEVICE_PLATFORM",
            DeviceInfoNames::DoubleFpConfig => "CL_DEVICE_DOUBLE_FP_CONFIG",
            DeviceInfoNames::PreferredVectorWidthHalf => "CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF",
            DeviceInfoNames::HostUnifiedMemory => "CL_DEVICE_HOST_UNIFIED_MEMORY",
            DeviceInfoNames::NativeVectorWidthChar => "CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR",
            DeviceInfoNames::NativeVectorWidthShort => "CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT",
            DeviceInfoNames::NativeVectorWidthInt => "CL_DEVICE_NATIVE_VECTOR_WIDTH_INT",
            DeviceInfoNames::NativeVectorWidthLong => "CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG",
            DeviceInfoNames::NativeVectorWidthFloat => "CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT",
            DeviceInfoNames::NativeVectorWidthDouble => "CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE",
            DeviceInfoNames::NativeVectorWidthHalf => "CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF",
            DeviceInfoNames::OpenclCVersion => "CL_DEVICE_OPENCL_C_VERSION",
            DeviceInfoNames::LinkerAvailable => "CL_DEVICE_LINKER_AVAILABLE",
            DeviceInfoNames::BuiltInKernels => "CL_DEVICE_BUILT_IN_KERNELS",
            DeviceInfoNames::ImageMaxBufferSize => "CL_DEVICE_IMAGE_MAX_BUFFER_SIZE",
            DeviceInfoNames::ImageMaxArraySize => "CL_DEVICE_IMAGE_MAX_ARRAY_SIZE",
            DeviceInfoNames::ParentDevice => "CL_DEVICE_PARENT_DEVICE",
            DeviceInfoNames::PartitionMaxSubDevices => "CL_DEVICE_PARTITION_MAX_SUB_DEVICES",
            DeviceInfoNames::PartitionProperties => "CL_DEVICE_PARTITION_PROPERTIES",
            DeviceInfoNames::PartitionAffinityDomain => "CL_DEVICE_PARTITION_AFFINITY_DOMAIN",
            DeviceInfoNames::PartitionType => "CL_DEVICE_PARTITION_TYPE",
            DeviceInfoNames::ReferenceCount => "CL_DEVICE_REFERENCE_COUNT",
            DeviceInfoNames::PreferredInteropUserSync => "CL_DEVICE_PREFERRED_INTEROP_USER_SYNC",
            DeviceInfoNames::PrintfBufferSize => "CL_DEVICE_PRINTF_BUFFER_SIZE",
            DeviceInfoNames::ImagePitchAlignment => "CL_DEVICE_IMAGE_PITCH_ALIGNMENT",
            DeviceInfoNames::ImageBaseAddressAlignment => "CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT",
            DeviceInfoNames::MaxReadWriteImageArgs => "CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS",
            DeviceInfoNames::MaxGlobalVariableSize => "CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE",
            DeviceInfoNames::QueueOnDeviceProperties => "CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES",
            DeviceInfoNames::QueueOnDevicePreferredSize => "CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE",
            DeviceInfoNames::QueueOnDeviceMaxSize => "CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE",
            DeviceInfoNames::MaxOnDeviceQueues => "CL_DEVICE_MAX_ON_DEVICE_QUEUES",
            DeviceInfoNames::MaxOnDeviceEvents => "CL_DEVICE_MAX_ON_DEVICE_EVENTS",
            DeviceInfoNames::SvmCapabilities => "CL_DEVICE_SVM_CAPABILITIES",
            DeviceInfoNames::GlobalVariablePreferredTotalSize => "CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE",
            DeviceInfoNames::MaxPipeArgs => "CL_DEVICE_MAX_PIPE_ARGS",
            DeviceInfoNames::PipeMaxActiveReservations => "CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS",
            DeviceInfoNames::PipeMaxPacketSize => "CL_DEVICE_PIPE_MAX_PACKET_SIZE",
            DeviceInfoNames::PreferredPlatformAtomicAlignment => "CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT",
            DeviceInfoNames::PreferredGlobalAtomicAlignment => "CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT",
            DeviceInfoNames::PreferredLocalAtomicAlignment => "CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT",
            DeviceInfoNames::IlVersion => "CL_DEVICE_IL_VERSION",
            DeviceInfoNames::MaxNumSubGroups => "CL_DEVICE_MAX_NUM_SUB_GROUPS",
            DeviceInfoNames::SubGroupIndependentForwardProgress => "CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS",
            DeviceInfoNames::NumericVersion => "CL_DEVICE_NUMERIC_VERSION",
            DeviceInfoNames::ExtensionsWithVersion => "CL_DEVICE_EXTENSIONS_WITH_VERSION",
            DeviceInfoNames::IlsWithVersion => "CL_DEVICE_ILS_WITH_VERSION",
            DeviceInfoNames::BuiltInKernelsWithVersion => "CL_DEVICE_BUILT_IN_KERNELS_WITH_VERSION",
            DeviceInfoNames::AtomicMemoryCapabilities => "CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES",
            DeviceInfoNames::AtomicFenceCapabilities => "CL_DEVICE_ATOMIC_FENCE_CAPABILITIES",
            DeviceInfoNames::NonUniformWorkGroupSupport => "CL_DEVICE_NON_UNIFORM_WORK_GROUP_SUPPORT",
            DeviceInfoNames::OpenclCAllVersions => "CL_DEVICE_OPENCL_C_ALL_VERSIONS",
            DeviceInfoNames::PreferredWorkGroupSizeMultiple => "CL_DEVICE_PREFERRED_WORK_GROUP_SIZE_MULTIPLE",
            DeviceInfoNames::WorkGroupCollectiveFunctionsSupport => "CL_DEVICE_WORK_GROUP_COLLECTIVE_FUNCTIONS_SUPPORT",
            DeviceInfoNames::GenericAddressSpaceSupport => "CL_DEVICE_GENERIC_ADDRESS_SPACE_SUPPORT",
            DeviceInfoNames::OpenclCFeatures => "CL_DEVICE_OPENCL_C_FEATURES",
            DeviceInfoNames::DeviceEnqueueCapabilities => "CL_DEVICE_DEVICE_ENQUEUE_CAPABILITIES",
            DeviceInfoNames::PipeSupport => "CL_DEVICE_PIPE_SUPPORT",
            DeviceInfoNames::LatestConformanceVersionPassed => "CL_DEVICE_LATEST_CONFORMANCE_VERSION_PASSED",
        }
    }
}

impl TryFrom<cl_uint> for DeviceInfoNames {
    type Error = ();
    fn try_from(v: cl_uint) -> Result<Self, Self::Error> {
        match v {
            x if x == DeviceInfoNames::Type as cl_uint => Ok(DeviceInfoNames::Type),
            x if x == DeviceInfoNames::VendorId as cl_uint => Ok(DeviceInfoNames::VendorId),
            x if x == DeviceInfoNames::MaxComputeUnits as cl_uint => Ok(DeviceInfoNames::MaxComputeUnits),
            x if x == DeviceInfoNames::MaxWorkItemDimensions as cl_uint => Ok(DeviceInfoNames::MaxWorkItemDimensions),
            x if x == DeviceInfoNames::MaxWorkGroupSize as cl_uint => Ok(DeviceInfoNames::MaxWorkGroupSize),
            x if x == DeviceInfoNames::MaxWorkItemSizes as cl_uint => Ok(DeviceInfoNames::MaxWorkItemSizes),
            x if x == DeviceInfoNames::PreferredVectorWidthChar as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthChar),
            x if x == DeviceInfoNames::PreferredVectorWidthShort as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthShort),
            x if x == DeviceInfoNames::PreferredVectorWidthInt as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthInt),
            x if x == DeviceInfoNames::PreferredVectorWidthLong as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthLong),
            x if x == DeviceInfoNames::PreferredVectorWidthFloat as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthFloat),
            x if x == DeviceInfoNames::PreferredVectorWidthDouble as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthDouble),
            x if x == DeviceInfoNames::MaxClockFrequency as cl_uint => Ok(DeviceInfoNames::MaxClockFrequency),
            x if x == DeviceInfoNames::AddressBits as cl_uint => Ok(DeviceInfoNames::AddressBits),
            x if x == DeviceInfoNames::MaxReadImageArgs as cl_uint => Ok(DeviceInfoNames::MaxReadImageArgs),
            x if x == DeviceInfoNames::MaxWriteImageArgs as cl_uint => Ok(DeviceInfoNames::MaxWriteImageArgs),
            x if x == DeviceInfoNames::MaxMemAllocSize as cl_uint => Ok(DeviceInfoNames::MaxMemAllocSize),
            x if x == DeviceInfoNames::Image2DMaxWidth as cl_uint => Ok(DeviceInfoNames::Image2DMaxWidth),
            x if x == DeviceInfoNames::Image2DMaxHeight as cl_uint => Ok(DeviceInfoNames::Image2DMaxHeight),
            x if x == DeviceInfoNames::Image3DMaxWidth as cl_uint => Ok(DeviceInfoNames::Image3DMaxWidth),
            x if x == DeviceInfoNames::Image3DMaxHeight as cl_uint => Ok(DeviceInfoNames::Image3DMaxHeight),
            x if x == DeviceInfoNames::Image3DMaxDepth as cl_uint => Ok(DeviceInfoNames::Image3DMaxDepth),
            x if x == DeviceInfoNames::ImageSupport as cl_uint => Ok(DeviceInfoNames::ImageSupport),
            x if x == DeviceInfoNames::MaxParameterSize as cl_uint => Ok(DeviceInfoNames::MaxParameterSize),
            x if x == DeviceInfoNames::MaxSamplers as cl_uint => Ok(DeviceInfoNames::MaxSamplers),
            x if x == DeviceInfoNames::MemBaseAddrAlign as cl_uint => Ok(DeviceInfoNames::MemBaseAddrAlign),
            x if x == DeviceInfoNames::MinDataTypeAlignSize as cl_uint => Ok(DeviceInfoNames::MinDataTypeAlignSize),
            x if x == DeviceInfoNames::SingleFpConfig as cl_uint => Ok(DeviceInfoNames::SingleFpConfig),
            x if x == DeviceInfoNames::GlobalMemCacheType as cl_uint => Ok(DeviceInfoNames::GlobalMemCacheType),
            x if x == DeviceInfoNames::GlobalMemCachelineSize as cl_uint => Ok(DeviceInfoNames::GlobalMemCachelineSize),
            x if x == DeviceInfoNames::GlobalMemCacheSize as cl_uint => Ok(DeviceInfoNames::GlobalMemCacheSize),
            x if x == DeviceInfoNames::GlobalMemSize as cl_uint => Ok(DeviceInfoNames::GlobalMemSize),
            x if x == DeviceInfoNames::MaxConstantBufferSize as cl_uint => Ok(DeviceInfoNames::MaxConstantBufferSize),
            x if x == DeviceInfoNames::MaxConstantArgs as cl_uint => Ok(DeviceInfoNames::MaxConstantArgs),
            x if x == DeviceInfoNames::LocalMemType as cl_uint => Ok(DeviceInfoNames::LocalMemType),
            x if x == DeviceInfoNames::LocalMemSize as cl_uint => Ok(DeviceInfoNames::LocalMemSize),
            x if x == DeviceInfoNames::ErrorCorrectionSupport as cl_uint => Ok(DeviceInfoNames::ErrorCorrectionSupport),
            x if x == DeviceInfoNames::ProfilingTimerResolution as cl_uint => Ok(DeviceInfoNames::ProfilingTimerResolution),
            x if x == DeviceInfoNames::EndianLittle as cl_uint => Ok(DeviceInfoNames::EndianLittle),
            x if x == DeviceInfoNames::Available as cl_uint => Ok(DeviceInfoNames::Available),
            x if x == DeviceInfoNames::CompilerAvailable as cl_uint => Ok(DeviceInfoNames::CompilerAvailable),
            x if x == DeviceInfoNames::ExecutionCapabilities as cl_uint => Ok(DeviceInfoNames::ExecutionCapabilities),
            x if x == DeviceInfoNames::QueueOnHostProperties as cl_uint => Ok(DeviceInfoNames::QueueOnHostProperties),
            x if x == DeviceInfoNames::Name as cl_uint => Ok(DeviceInfoNames::Name),
            x if x == DeviceInfoNames::Vendor as cl_uint => Ok(DeviceInfoNames::Vendor),
            x if x == DeviceInfoNames::ClDriverVersion as cl_uint => Ok(DeviceInfoNames::ClDriverVersion),
            x if x == DeviceInfoNames::Profile as cl_uint => Ok(DeviceInfoNames::Profile),
            x if x == DeviceInfoNames::Version as cl_uint => Ok(DeviceInfoNames::Version),
            x if x == DeviceInfoNames::Extensions as cl_uint => Ok(DeviceInfoNames::Extensions),
            x if x == DeviceInfoNames::Platform as cl_uint => Ok(DeviceInfoNames::Platform),
            x if x == DeviceInfoNames::DoubleFpConfig as cl_uint => Ok(DeviceInfoNames::DoubleFpConfig),
            x if x == DeviceInfoNames::PreferredVectorWidthHalf as cl_uint => Ok(DeviceInfoNames::PreferredVectorWidthHalf),
            x if x == DeviceInfoNames::HostUnifiedMemory as cl_uint => Ok(DeviceInfoNames::HostUnifiedMemory),
            x if x == DeviceInfoNames::NativeVectorWidthChar as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthChar),
            x if x == DeviceInfoNames::NativeVectorWidthShort as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthShort),
            x if x == DeviceInfoNames::NativeVectorWidthInt as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthInt),
            x if x == DeviceInfoNames::NativeVectorWidthLong as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthLong),
            x if x == DeviceInfoNames::NativeVectorWidthFloat as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthFloat),
            x if x == DeviceInfoNames::NativeVectorWidthDouble as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthDouble),
            x if x == DeviceInfoNames::NativeVectorWidthHalf as cl_uint => Ok(DeviceInfoNames::NativeVectorWidthHalf),
            x if x == DeviceInfoNames::OpenclCVersion as cl_uint => Ok(DeviceInfoNames::OpenclCVersion),
            x if x == DeviceInfoNames::LinkerAvailable as cl_uint => Ok(DeviceInfoNames::LinkerAvailable),
            x if x == DeviceInfoNames::BuiltInKernels as cl_uint => Ok(DeviceInfoNames::BuiltInKernels),
            x if x == DeviceInfoNames::ImageMaxBufferSize as cl_uint => Ok(DeviceInfoNames::ImageMaxBufferSize),
            x if x == DeviceInfoNames::ImageMaxArraySize as cl_uint => Ok(DeviceInfoNames::ImageMaxArraySize),
            x if x == DeviceInfoNames::ParentDevice as cl_uint => Ok(DeviceInfoNames::ParentDevice),
            x if x == DeviceInfoNames::PartitionMaxSubDevices as cl_uint => Ok(DeviceInfoNames::PartitionMaxSubDevices),
            x if x == DeviceInfoNames::PartitionProperties as cl_uint => Ok(DeviceInfoNames::PartitionProperties),
            x if x == DeviceInfoNames::PartitionAffinityDomain as cl_uint => Ok(DeviceInfoNames::PartitionAffinityDomain),
            x if x == DeviceInfoNames::PartitionType as cl_uint => Ok(DeviceInfoNames::PartitionType),
            x if x == DeviceInfoNames::ReferenceCount as cl_uint => Ok(DeviceInfoNames::ReferenceCount),
            x if x == DeviceInfoNames::PreferredInteropUserSync as cl_uint => Ok(DeviceInfoNames::PreferredInteropUserSync),
            x if x == DeviceInfoNames::PrintfBufferSize as cl_uint => Ok(DeviceInfoNames::PrintfBufferSize),
            x if x == DeviceInfoNames::ImagePitchAlignment as cl_uint => Ok(DeviceInfoNames::ImagePitchAlignment),
            x if x == DeviceInfoNames::ImageBaseAddressAlignment as cl_uint => Ok(DeviceInfoNames::ImageBaseAddressAlignment),
            x if x == DeviceInfoNames::MaxReadWriteImageArgs as cl_uint => Ok(DeviceInfoNames::MaxReadWriteImageArgs),
            x if x == DeviceInfoNames::MaxGlobalVariableSize as cl_uint => Ok(DeviceInfoNames::MaxGlobalVariableSize),
            x if x == DeviceInfoNames::QueueOnDeviceProperties as cl_uint => Ok(DeviceInfoNames::QueueOnDeviceProperties),
            x if x == DeviceInfoNames::QueueOnDevicePreferredSize as cl_uint => Ok(DeviceInfoNames::QueueOnDevicePreferredSize),
            x if x == DeviceInfoNames::QueueOnDeviceMaxSize as cl_uint => Ok(DeviceInfoNames::QueueOnDeviceMaxSize),
            x if x == DeviceInfoNames::MaxOnDeviceQueues as cl_uint => Ok(DeviceInfoNames::MaxOnDeviceQueues),
            x if x == DeviceInfoNames::MaxOnDeviceEvents as cl_uint => Ok(DeviceInfoNames::MaxOnDeviceEvents),
            x if x == DeviceInfoNames::SvmCapabilities as cl_uint => Ok(DeviceInfoNames::SvmCapabilities),
            x if x == DeviceInfoNames::GlobalVariablePreferredTotalSize as cl_uint => Ok(DeviceInfoNames::GlobalVariablePreferredTotalSize),
            x if x == DeviceInfoNames::MaxPipeArgs as cl_uint => Ok(DeviceInfoNames::MaxPipeArgs),
            x if x == DeviceInfoNames::PipeMaxActiveReservations as cl_uint => Ok(DeviceInfoNames::PipeMaxActiveReservations),
            x if x == DeviceInfoNames::PipeMaxPacketSize as cl_uint => Ok(DeviceInfoNames::PipeMaxPacketSize),
            x if x == DeviceInfoNames::PreferredPlatformAtomicAlignment as cl_uint => Ok(DeviceInfoNames::PreferredPlatformAtomicAlignment),
            x if x == DeviceInfoNames::PreferredGlobalAtomicAlignment as cl_uint => Ok(DeviceInfoNames::PreferredGlobalAtomicAlignment),
            x if x == DeviceInfoNames::PreferredLocalAtomicAlignment as cl_uint => Ok(DeviceInfoNames::PreferredLocalAtomicAlignment),
            x if x == DeviceInfoNames::IlVersion as cl_uint => Ok(DeviceInfoNames::IlVersion),
            x if x == DeviceInfoNames::MaxNumSubGroups as cl_uint => Ok(DeviceInfoNames::MaxNumSubGroups),
            x if x == DeviceInfoNames::SubGroupIndependentForwardProgress as cl_uint => Ok(DeviceInfoNames::SubGroupIndependentForwardProgress),
            x if x == DeviceInfoNames::NumericVersion as cl_uint => Ok(DeviceInfoNames::NumericVersion),
            x if x == DeviceInfoNames::ExtensionsWithVersion as cl_uint => Ok(DeviceInfoNames::ExtensionsWithVersion),
            x if x == DeviceInfoNames::IlsWithVersion as cl_uint => Ok(DeviceInfoNames::IlsWithVersion),
            x if x == DeviceInfoNames::BuiltInKernelsWithVersion as cl_uint => Ok(DeviceInfoNames::BuiltInKernelsWithVersion),
            x if x == DeviceInfoNames::AtomicMemoryCapabilities as cl_uint => Ok(DeviceInfoNames::AtomicMemoryCapabilities),
            x if x == DeviceInfoNames::AtomicFenceCapabilities as cl_uint => Ok(DeviceInfoNames::AtomicFenceCapabilities),
            x if x == DeviceInfoNames::NonUniformWorkGroupSupport as cl_uint => Ok(DeviceInfoNames::NonUniformWorkGroupSupport),
            x if x == DeviceInfoNames::OpenclCAllVersions as cl_uint => Ok(DeviceInfoNames::OpenclCAllVersions),
            x if x == DeviceInfoNames::PreferredWorkGroupSizeMultiple as cl_uint => Ok(DeviceInfoNames::PreferredWorkGroupSizeMultiple),
            x if x == DeviceInfoNames::WorkGroupCollectiveFunctionsSupport as cl_uint => Ok(DeviceInfoNames::WorkGroupCollectiveFunctionsSupport),
            x if x == DeviceInfoNames::GenericAddressSpaceSupport as cl_uint => Ok(DeviceInfoNames::GenericAddressSpaceSupport),
            x if x == DeviceInfoNames::OpenclCFeatures as cl_uint => Ok(DeviceInfoNames::OpenclCFeatures),
            x if x == DeviceInfoNames::DeviceEnqueueCapabilities as cl_uint => Ok(DeviceInfoNames::DeviceEnqueueCapabilities),
            x if x == DeviceInfoNames::PipeSupport as cl_uint => Ok(DeviceInfoNames::PipeSupport),
            x if x == DeviceInfoNames::LatestConformanceVersionPassed as cl_uint => Ok(DeviceInfoNames::LatestConformanceVersionPassed),
            _ => Err(()),
        }
    }
}

